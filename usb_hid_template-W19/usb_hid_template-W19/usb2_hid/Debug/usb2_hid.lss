
usb2_hid.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000fbc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000f48  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000014  00800100  00800100  00000fbc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000fbc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000fec  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000230  00000000  00000000  0000102c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002941  00000000  00000000  0000125c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000011c7  00000000  00000000  00003b9d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000017b6  00000000  00000000  00004d64  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000418  00000000  00000000  0000651c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000e7d  00000000  00000000  00006934  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000e25  00000000  00000000  000077b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001a0  00000000  00000000  000085d6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__ctors_end>
   4:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
   8:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
   c:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
  10:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
  14:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
  18:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
  1c:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
  20:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
  24:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
  28:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
  2c:	0c 94 8f 06 	jmp	0xd1e	; 0xd1e <__vector_11>
  30:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
  34:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
  38:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
  3c:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
  40:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
  44:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
  48:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
  4c:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
  50:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
  54:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
  58:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
  5c:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
  60:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
  64:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
  68:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
  6c:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
  70:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
  74:	b9 05       	cpc	r27, r9
  76:	3d 05       	cpc	r19, r13
  78:	43 06       	cpc	r4, r19
  7a:	7f 05       	cpc	r23, r15
  7c:	43 06       	cpc	r4, r19
  7e:	0b 05       	cpc	r16, r11
  80:	42 04       	cpc	r4, r2
  82:	43 06       	cpc	r4, r19
  84:	ed 04       	cpc	r14, r13
  86:	27 05       	cpc	r18, r7
  88:	f6 05       	cpc	r31, r6
  8a:	21 06       	cpc	r2, r17

0000008c <__trampolines_end>:
  8c:	06 00       	.word	0x0006	; ????
  8e:	ff 09       	sbc	r31, r15
  90:	01 a1       	ldd	r16, Z+33	; 0x21
  92:	01 09       	sbc	r16, r1
  94:	01 15       	cp	r16, r1
  96:	00 26       	eor	r0, r16
  98:	ff 00       	.word	0x00ff	; ????
  9a:	75 08       	sbc	r7, r5
  9c:	95 06       	cpc	r9, r21
  9e:	81 02       	muls	r24, r17
  a0:	09 01       	movw	r0, r18
  a2:	15 00       	.word	0x0015	; ????
  a4:	26 ff       	sbrs	r18, 6
  a6:	00 75       	andi	r16, 0x50	; 80
  a8:	08 95       	ret
  aa:	07 91       	elpm	r16, Z+
  ac:	02 c0       	rjmp	.+4      	; 0xb2 <usb_user_product_string_descriptor>

000000ae <usb_user_language_id>:
  ae:	04 03 09 04                                         ....

000000b2 <usb_user_product_string_descriptor>:
  b2:	20 03 43 00 50 00 48 00 45 00 34 00 31 00 32 00      .C.P.H.E.4.1.2.
  c2:	20 00 55 00 53 00 42 00 20 00 49 00 2f 00 4f 00      .U.S.B. .I./.O.

000000d2 <usb_user_manufacturer_string_descriptor>:
  d2:	3c 03 53 00 6f 00 75 00 74 00 68 00 65 00 72 00     <.S.o.u.t.h.e.r.
  e2:	6e 00 20 00 41 00 64 00 76 00 65 00 6e 00 74 00     n. .A.d.v.e.n.t.
  f2:	69 00 73 00 74 00 20 00 55 00 6e 00 69 00 76 00     i.s.t. .U.n.i.v.
 102:	65 00 72 00 73 00 69 00 74 00 79 00                 e.r.s.i.t.y.

0000010e <usb_conf_desc>:
 10e:	09 02 29 00 01 01 00 80 64 09 04 00 00 02 03 00     ..).....d.......
 11e:	00 00 09 21 11 01 00 01 22 22 00 07 05 81 03 08     ...!....""......
 12e:	00 00 07 05 02 03 08 00 00                          .........

00000137 <usb_dev_desc>:
 137:	12 01 00 02 00 00 00 20 25 09 60 01 00 10 01 02     ....... %.`.....
 147:	00 01 00                                            ...

0000014a <__ctors_end>:
 14a:	11 24       	eor	r1, r1
 14c:	1f be       	out	0x3f, r1	; 63
 14e:	cf ef       	ldi	r28, 0xFF	; 255
 150:	d2 e0       	ldi	r29, 0x02	; 2
 152:	de bf       	out	0x3e, r29	; 62
 154:	cd bf       	out	0x3d, r28	; 61

00000156 <__low_level_init>:
from 1 to 129. Thus, one does not need to use \c clock_div_t type as argument.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
 156:	90 e0       	ldi	r25, 0x00	; 0
 158:	80 e8       	ldi	r24, 0x80	; 128
 15a:	0f b6       	in	r0, 0x3f	; 63
 15c:	f8 94       	cli
 15e:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__EEPROM_REGION_LENGTH__+0x7f0061>
 162:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__EEPROM_REGION_LENGTH__+0x7f0061>
 166:	0f be       	out	0x3f, r0	; 63
#endif
char __low_level_init()
{
  Clear_prescaler();
  return 1;
}
 168:	81 e0       	ldi	r24, 0x01	; 1

0000016a <__do_clear_bss>:
 16a:	21 e0       	ldi	r18, 0x01	; 1
 16c:	a0 e0       	ldi	r26, 0x00	; 0
 16e:	b1 e0       	ldi	r27, 0x01	; 1
 170:	01 c0       	rjmp	.+2      	; 0x174 <.do_clear_bss_start>

00000172 <.do_clear_bss_loop>:
 172:	1d 92       	st	X+, r1

00000174 <.do_clear_bss_start>:
 174:	a4 31       	cpi	r26, 0x14	; 20
 176:	b2 07       	cpc	r27, r18
 178:	e1 f7       	brne	.-8      	; 0x172 <.do_clear_bss_loop>
 17a:	0e 94 34 01 	call	0x268	; 0x268 <main>
 17e:	0c 94 a2 07 	jmp	0xf44	; 0xf44 <_exit>

00000182 <__bad_interrupt>:
 182:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000186 <hid_task_init>:

void hid_report_out  (void);
void hid_report_in   (void);

void hid_task_init(void)
{
 186:	08 95       	ret

00000188 <hid_report_out>:
}

//! @brief Get data report from Host
//!
void hid_report_out(void)
{
 188:	cf 93       	push	r28
 18a:	df 93       	push	r29
 18c:	00 d0       	rcall	.+0      	; 0x18e <hid_report_out+0x6>
 18e:	00 d0       	rcall	.+0      	; 0x190 <hid_report_out+0x8>
 190:	00 d0       	rcall	.+0      	; 0x192 <hid_report_out+0xa>
 192:	cd b7       	in	r28, 0x3d	; 61
 194:	de b7       	in	r29, 0x3e	; 62
	U8 control;
	U8 report[LENGTH_OF_REPORT_OUT-1];
	U8 i;
	
	Usb_select_endpoint(EP_HID_OUT);
 196:	82 e0       	ldi	r24, 0x02	; 2
 198:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
	if(Is_usb_receive_out())
 19c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 1a0:	82 ff       	sbrs	r24, 2
 1a2:	32 c0       	rjmp	.+100    	; 0x208 <hid_report_out+0x80>
	{

		// CPHE412: ADD CODE HERE TO PROCESS DATA COMING FROM HOST
		if (Usb_byte_counter() >= LENGTH_OF_REPORT_OUT)
 1a4:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__EEPROM_REGION_LENGTH__+0x7f00f2>
 1a8:	87 30       	cpi	r24, 0x07	; 7
 1aa:	30 f1       	brcs	.+76     	; 0x1f8 <hid_report_out+0x70>
		{
			control = Usb_read_byte();	// Read the control byte
 1ac:	90 91 f1 00 	lds	r25, 0x00F1	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
 1b0:	fe 01       	movw	r30, r28
 1b2:	31 96       	adiw	r30, 0x01	; 1
 1b4:	9e 01       	movw	r18, r28
 1b6:	29 5f       	subi	r18, 0xF9	; 249
 1b8:	3f 4f       	sbci	r19, 0xFF	; 255

			for (i = 0 ; i < (LENGTH_OF_REPORT_OUT-1) ; i++)
			{
				report[i] = Usb_read_byte();
 1ba:	a1 ef       	ldi	r26, 0xF1	; 241
 1bc:	b0 e0       	ldi	r27, 0x00	; 0
 1be:	8c 91       	ld	r24, X
 1c0:	81 93       	st	Z+, r24
		// CPHE412: ADD CODE HERE TO PROCESS DATA COMING FROM HOST
		if (Usb_byte_counter() >= LENGTH_OF_REPORT_OUT)
		{
			control = Usb_read_byte();	// Read the control byte

			for (i = 0 ; i < (LENGTH_OF_REPORT_OUT-1) ; i++)
 1c2:	e2 17       	cp	r30, r18
 1c4:	f3 07       	cpc	r31, r19
 1c6:	d9 f7       	brne	.-10     	; 0x1be <hid_report_out+0x36>
			{
				report[i] = Usb_read_byte();
			}

			if (control & IO_WRITE_DDRB)
 1c8:	90 ff       	sbrs	r25, 0
 1ca:	02 c0       	rjmp	.+4      	; 0x1d0 <hid_report_out+0x48>
				DDRB = report[0];
 1cc:	89 81       	ldd	r24, Y+1	; 0x01
 1ce:	84 b9       	out	0x04, r24	; 4
			if (control & IO_WRITE_DDRC)
 1d0:	91 ff       	sbrs	r25, 1
 1d2:	02 c0       	rjmp	.+4      	; 0x1d8 <hid_report_out+0x50>
				DDRC = report[1];
 1d4:	8a 81       	ldd	r24, Y+2	; 0x02
 1d6:	87 b9       	out	0x07, r24	; 7
			if (control & IO_WRITE_DDRD)
 1d8:	92 ff       	sbrs	r25, 2
 1da:	02 c0       	rjmp	.+4      	; 0x1e0 <hid_report_out+0x58>
				DDRD = report[2];
 1dc:	8b 81       	ldd	r24, Y+3	; 0x03
 1de:	8a b9       	out	0x0a, r24	; 10
			if (control & IO_WRITE_PORTB)
 1e0:	93 ff       	sbrs	r25, 3
 1e2:	02 c0       	rjmp	.+4      	; 0x1e8 <hid_report_out+0x60>
				PORTB = report[3];
 1e4:	8c 81       	ldd	r24, Y+4	; 0x04
 1e6:	85 b9       	out	0x05, r24	; 5
			if (control & IO_WRITE_PORTC)
 1e8:	94 ff       	sbrs	r25, 4
 1ea:	02 c0       	rjmp	.+4      	; 0x1f0 <hid_report_out+0x68>
				PORTC = report[4];
 1ec:	8d 81       	ldd	r24, Y+5	; 0x05
 1ee:	88 b9       	out	0x08, r24	; 8
			if (control & IO_WRITE_PORTD)
 1f0:	95 ff       	sbrs	r25, 5
 1f2:	02 c0       	rjmp	.+4      	; 0x1f8 <hid_report_out+0x70>
				PORTD = report[5];
 1f4:	8e 81       	ldd	r24, Y+6	; 0x06
 1f6:	8b b9       	out	0x0b, r24	; 11
		}
	
		Usb_ack_receive_out();
 1f8:	e8 ee       	ldi	r30, 0xE8	; 232
 1fa:	f0 e0       	ldi	r31, 0x00	; 0
 1fc:	80 81       	ld	r24, Z
 1fe:	8b 7f       	andi	r24, 0xFB	; 251
 200:	80 83       	st	Z, r24
 202:	80 81       	ld	r24, Z
 204:	8f 77       	andi	r24, 0x7F	; 127
 206:	80 83       	st	Z, r24

   }
}
 208:	26 96       	adiw	r28, 0x06	; 6
 20a:	0f b6       	in	r0, 0x3f	; 63
 20c:	f8 94       	cli
 20e:	de bf       	out	0x3e, r29	; 62
 210:	0f be       	out	0x3f, r0	; 63
 212:	cd bf       	out	0x3d, r28	; 61
 214:	df 91       	pop	r29
 216:	cf 91       	pop	r28
 218:	08 95       	ret

0000021a <hid_report_in>:

//! @brief Send data report to Host
//!
void hid_report_in(void)
{
	Usb_select_endpoint(EP_HID_IN);
 21a:	81 e0       	ldi	r24, 0x01	; 1
 21c:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
	if(!Is_usb_write_enabled())
 220:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 224:	85 ff       	sbrs	r24, 5
 226:	16 c0       	rjmp	.+44     	; 0x254 <hid_report_in+0x3a>
		return;                                // Not ready to send report
   
	Usb_write_byte(DDRB);
 228:	84 b1       	in	r24, 0x04	; 4
 22a:	e1 ef       	ldi	r30, 0xF1	; 241
 22c:	f0 e0       	ldi	r31, 0x00	; 0
 22e:	80 83       	st	Z, r24
	Usb_write_byte(DDRC);
 230:	87 b1       	in	r24, 0x07	; 7
 232:	80 83       	st	Z, r24
	Usb_write_byte(DDRD);
 234:	8a b1       	in	r24, 0x0a	; 10
 236:	80 83       	st	Z, r24
	Usb_write_byte(PINB);
 238:	83 b1       	in	r24, 0x03	; 3
 23a:	80 83       	st	Z, r24
	Usb_write_byte(PINC);
 23c:	86 b1       	in	r24, 0x06	; 6
 23e:	80 83       	st	Z, r24
	Usb_write_byte(PIND);
 240:	89 b1       	in	r24, 0x09	; 9
 242:	80 83       	st	Z, r24


	// CPHE412: ADD CODE HERE TO SEND DATA TO HOST
	// Gets called every time the device needs an IN
	Usb_ack_in_ready();			// Send data over the USB
 244:	e8 ee       	ldi	r30, 0xE8	; 232
 246:	f0 e0       	ldi	r31, 0x00	; 0
 248:	80 81       	ld	r24, Z
 24a:	8e 7f       	andi	r24, 0xFE	; 254
 24c:	80 83       	st	Z, r24
 24e:	80 81       	ld	r24, Z
 250:	8f 77       	andi	r24, 0x7F	; 127
 252:	80 83       	st	Z, r24
 254:	08 95       	ret

00000256 <hid_task>:
//! @brief Entry point of the HID generic communication task
//! This function manages IN/OUT report management.
//!
void hid_task(void)
{
   if(!Is_device_enumerated())          // Check USB HID is enumerated
 256:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <usb_configuration_nb>
 25a:	88 23       	and	r24, r24
 25c:	21 f0       	breq	.+8      	; 0x266 <hid_task+0x10>
      return;

   hid_report_out();
 25e:	0e 94 c4 00 	call	0x188	; 0x188 <hid_report_out>
   hid_report_in();
 262:	0e 94 0d 01 	call	0x21a	; 0x21a <hid_report_in>
 266:	08 95       	ret

00000268 <main>:

//_____ D E F I N I T I O N S ______________________________________________

int main(void)
{
   wdtdrv_disable();
 268:	0e 94 89 07 	call	0xf12	; 0xf12 <wdtdrv_disable>
 26c:	90 e0       	ldi	r25, 0x00	; 0
 26e:	80 e8       	ldi	r24, 0x80	; 128
 270:	0f b6       	in	r0, 0x3f	; 63
 272:	f8 94       	cli
 274:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__EEPROM_REGION_LENGTH__+0x7f0061>
 278:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__EEPROM_REGION_LENGTH__+0x7f0061>
 27c:	0f be       	out	0x3f, r0	; 63
   Clear_prescaler();
   scheduler();
 27e:	0e 94 4e 01 	call	0x29c	; 0x29c <scheduler>
   return 0;
}
 282:	80 e0       	ldi	r24, 0x00	; 0
 284:	90 e0       	ldi	r25, 0x00	; 0
 286:	08 95       	ret

00000288 <scheduler_init>:
   #endif
   #ifdef TOKEN_MODE
      token =  TOKEN_FREE;
   #endif
   #ifdef Scheduler_task_1_init
      Scheduler_task_1_init();  
 288:	0e 94 68 06 	call	0xcd0	; 0xcd0 <usb_task_init>
      Scheduler_call_next_init();
   #endif
   #ifdef Scheduler_task_2_init
      Scheduler_task_2_init();  
 28c:	0e 94 c3 00 	call	0x186	; 0x186 <hid_task_init>
 290:	08 95       	ret

00000292 <scheduler_tasks>:

   for(;;)
   {
      Scheduler_new_schedule();
      #ifdef Scheduler_task_1
         Scheduler_task_1();
 292:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <usb_task>
         Scheduler_call_next_task();
      #endif
      #ifdef Scheduler_task_2
         Scheduler_task_2();
 296:	0e 94 2b 01 	call	0x256	; 0x256 <hid_task>
 29a:	fb cf       	rjmp	.-10     	; 0x292 <scheduler_tasks>

0000029c <scheduler>:
//!
//! @param  :none
//! @return :none
void scheduler (void)
{
   scheduler_init();
 29c:	0e 94 44 01 	call	0x288	; 0x288 <scheduler_init>
   scheduler_tasks();
 2a0:	0e 94 49 01 	call	0x292	; 0x292 <scheduler_tasks>

000002a4 <usb_device_task_init>:
//! @return none
//!
//!/
void usb_device_task_init(void)
{
   Usb_disable();
 2a4:	e8 ed       	ldi	r30, 0xD8	; 216
 2a6:	f0 e0       	ldi	r31, 0x00	; 0
 2a8:	80 81       	ld	r24, Z
 2aa:	8f 77       	andi	r24, 0x7F	; 127
 2ac:	80 83       	st	Z, r24
   Usb_enable();
 2ae:	80 81       	ld	r24, Z
 2b0:	80 68       	ori	r24, 0x80	; 128
 2b2:	80 83       	st	Z, r24
 2b4:	08 95       	ret

000002b6 <usb_start_device>:
//!
//! @return none
//!
void usb_start_device (void)
{
   Usb_freeze_clock();
 2b6:	e8 ed       	ldi	r30, 0xD8	; 216
 2b8:	f0 e0       	ldi	r31, 0x00	; 0
 2ba:	80 81       	ld	r24, Z
 2bc:	80 62       	ori	r24, 0x20	; 32
 2be:	80 83       	st	Z, r24
#ifndef USE_USB_AUTOBAUD
   Pll_start_auto();
 2c0:	82 e0       	ldi	r24, 0x02	; 2
 2c2:	89 bd       	out	0x29, r24	; 41
#else
   usb_autobaud();
#endif
   Wait_pll_ready();
 2c4:	09 b4       	in	r0, 0x29	; 41
 2c6:	00 fe       	sbrs	r0, 0
 2c8:	fd cf       	rjmp	.-6      	; 0x2c4 <usb_start_device+0xe>
   Usb_unfreeze_clock();
 2ca:	e8 ed       	ldi	r30, 0xD8	; 216
 2cc:	f0 e0       	ldi	r31, 0x00	; 0
 2ce:	80 81       	ld	r24, Z
 2d0:	8f 7d       	andi	r24, 0xDF	; 223
 2d2:	80 83       	st	Z, r24
   Usb_attach();
 2d4:	e0 ee       	ldi	r30, 0xE0	; 224
 2d6:	f0 e0       	ldi	r31, 0x00	; 0
 2d8:	80 81       	ld	r24, Z
 2da:	8e 7f       	andi	r24, 0xFE	; 254
 2dc:	80 83       	st	Z, r24
#if (USB_RESET_CPU == ENABLED)
   Usb_reset_all_system();
#else
   Usb_reset_macro_only();
 2de:	80 81       	ld	r24, Z
 2e0:	8b 7f       	andi	r24, 0xFB	; 251
 2e2:	80 83       	st	Z, r24
#endif
   usb_init_device();         // configure the USB controller EP0
 2e4:	0e 94 bb 01 	call	0x376	; 0x376 <usb_init_device>
   Usb_enable_suspend_interrupt();
 2e8:	e2 ee       	ldi	r30, 0xE2	; 226
 2ea:	f0 e0       	ldi	r31, 0x00	; 0
 2ec:	80 81       	ld	r24, Z
 2ee:	81 60       	ori	r24, 0x01	; 1
 2f0:	80 83       	st	Z, r24
   Usb_enable_reset_interrupt();
 2f2:	80 81       	ld	r24, Z
 2f4:	88 60       	ori	r24, 0x08	; 8
 2f6:	80 83       	st	Z, r24
   Enable_interrupt();
 2f8:	78 94       	sei
 2fa:	08 95       	ret

000002fc <usb_device_task>:
//! @param none
//!
//! @return none
void usb_device_task(void)
{
   if (usb_connected == FALSE)
 2fc:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <usb_connected>
 300:	81 11       	cpse	r24, r1
 302:	05 c0       	rjmp	.+10     	; 0x30e <__stack+0xf>
       usb_connected = TRUE;
       usb_start_device();
       Usb_vbus_on_action();
     }
     #else
     usb_connected = TRUE;    // attach if application is not self-powered
 304:	81 e0       	ldi	r24, 0x01	; 1
 306:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <usb_connected>
     usb_start_device();
 30a:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <usb_start_device>
     usb_connected = FALSE;
     usb_configuration_nb=0;
   }
   #endif

   if(Is_usb_event(EVT_USB_RESET))
 30e:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <g_usb_event>
 312:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <g_usb_event+0x1>
 316:	90 ff       	sbrs	r25, 0
 318:	10 c0       	rjmp	.+32     	; 0x33a <__stack+0x3b>
   {
      Usb_ack_event(EVT_USB_RESET);
 31a:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <g_usb_event>
 31e:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <g_usb_event+0x1>
 322:	9e 7f       	andi	r25, 0xFE	; 254
 324:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <g_usb_event+0x1>
 328:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <g_usb_event>
      Usb_reset_endpoint(0);
 32c:	ea ee       	ldi	r30, 0xEA	; 234
 32e:	f0 e0       	ldi	r31, 0x00	; 0
 330:	81 e0       	ldi	r24, 0x01	; 1
 332:	80 83       	st	Z, r24
 334:	10 82       	st	Z, r1
      usb_configuration_nb=0;
 336:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <usb_configuration_nb>
   }

   // Here connection to the device enumeration process
   Usb_select_endpoint(EP_CONTROL);
 33a:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
   if (Is_usb_receive_setup())
 33e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 342:	83 fd       	sbrc	r24, 3
   {
      usb_process_request();
 344:	0e 94 27 04 	call	0x84e	; 0x84e <usb_process_request>
 348:	08 95       	ret

0000034a <usb_config_ep>:
//! @return none
//!
void usb_halt_endpoint (U8 ep_num)
{
   Usb_select_endpoint(ep_num);
   Usb_enable_stall_handshake();
 34a:	eb ee       	ldi	r30, 0xEB	; 235
 34c:	f0 e0       	ldi	r31, 0x00	; 0
 34e:	90 81       	ld	r25, Z
 350:	91 60       	ori	r25, 0x01	; 1
 352:	90 83       	st	Z, r25
 354:	80 93 ec 00 	sts	0x00EC, r24	; 0x8000ec <__EEPROM_REGION_LENGTH__+0x7f00ec>
 358:	ed ee       	ldi	r30, 0xED	; 237
 35a:	f0 e0       	ldi	r31, 0x00	; 0
 35c:	80 81       	ld	r24, Z
 35e:	82 70       	andi	r24, 0x02	; 2
 360:	68 2b       	or	r22, r24
 362:	60 83       	st	Z, r22
 364:	80 81       	ld	r24, Z
 366:	82 60       	ori	r24, 0x02	; 2
 368:	80 83       	st	Z, r24
 36a:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__EEPROM_REGION_LENGTH__+0x7f00ee>
 36e:	88 1f       	adc	r24, r24
 370:	88 27       	eor	r24, r24
 372:	88 1f       	adc	r24, r24
 374:	08 95       	ret

00000376 <usb_init_device>:
//!
//! @return status
//!
U8 usb_init_device (void)
{
      Usb_select_endpoint(EP_CONTROL);
 376:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
      if(!Is_usb_endpoint_enabled())
 37a:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
 37e:	80 fd       	sbrc	r24, 0
 380:	07 c0       	rjmp	.+14     	; 0x390 <usb_init_device+0x1a>
      {
         return usb_configure_endpoint(EP_CONTROL,    \
 382:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
 386:	60 e2       	ldi	r22, 0x20	; 32
 388:	82 e0       	ldi	r24, 0x02	; 2
 38a:	0e 94 a5 01 	call	0x34a	; 0x34a <usb_config_ep>
 38e:	08 95       	ret
                                DIRECTION_OUT, \
                                SIZE_32,       \
                                ONE_BANK,      \
                                NYET_DISABLED);
      }
   return FALSE;
 390:	80 e0       	ldi	r24, 0x00	; 0
}
 392:	08 95       	ret

00000394 <usb_user_endpoint_init>:
//! @brief This function configures the endpoints
//!
//! @param conf_nb configuration number choosed by USB host
//!
void usb_user_endpoint_init(U8 conf_nb)
{
 394:	cf 93       	push	r28
 396:	df 93       	push	r29
   usb_configure_endpoint( EP_HID_IN,   \
 398:	c9 ee       	ldi	r28, 0xE9	; 233
 39a:	d0 e0       	ldi	r29, 0x00	; 0
 39c:	81 e0       	ldi	r24, 0x01	; 1
 39e:	88 83       	st	Y, r24
 3a0:	60 e0       	ldi	r22, 0x00	; 0
 3a2:	81 ec       	ldi	r24, 0xC1	; 193
 3a4:	0e 94 a5 01 	call	0x34a	; 0x34a <usb_config_ep>
                           DIRECTION_IN,  \
                           SIZE_8,        \
                           ONE_BANK,      \
                           NYET_ENABLED);

   usb_configure_endpoint( EP_HID_OUT,    \
 3a8:	82 e0       	ldi	r24, 0x02	; 2
 3aa:	88 83       	st	Y, r24
 3ac:	60 e0       	ldi	r22, 0x00	; 0
 3ae:	80 ec       	ldi	r24, 0xC0	; 192
 3b0:	0e 94 a5 01 	call	0x34a	; 0x34a <usb_config_ep>
                           TYPE_INTERRUPT,\
                           DIRECTION_OUT, \
                           SIZE_8,        \
                           ONE_BANK,      \
                           NYET_ENABLED);
}
 3b4:	df 91       	pop	r29
 3b6:	cf 91       	pop	r28
 3b8:	08 95       	ret

000003ba <usb_user_interface_get>:
//! @return alternate setting configurated
//!
U8   usb_user_interface_get( U16 wInterface )
{
   return 0;  // Only one alternate setting possible for all interface
}
 3ba:	80 e0       	ldi	r24, 0x00	; 0
 3bc:	08 95       	ret

000003be <usb_user_interface_reset>:
//!
//! @param wInterface         Interface selected
//! @param alternate_setting  alternate setting selected
//!
void usb_user_interface_reset(U16 wInterface, U8 alternate_setting)
{  
 3be:	cf 93       	push	r28
 3c0:	df 93       	push	r29
   // default setting selected = reset data toggle
   if( INTERFACE_NB == wInterface )
 3c2:	89 2b       	or	r24, r25
 3c4:	d9 f4       	brne	.+54     	; 0x3fc <usb_user_interface_reset+0x3e>
   {
      // Interface HID
      Usb_select_endpoint(EP_HID_IN);
 3c6:	c9 ee       	ldi	r28, 0xE9	; 233
 3c8:	d0 e0       	ldi	r29, 0x00	; 0
 3ca:	81 e0       	ldi	r24, 0x01	; 1
 3cc:	88 83       	st	Y, r24
      Usb_disable_stall_handshake();
 3ce:	eb ee       	ldi	r30, 0xEB	; 235
 3d0:	f0 e0       	ldi	r31, 0x00	; 0
 3d2:	80 81       	ld	r24, Z
 3d4:	80 61       	ori	r24, 0x10	; 16
 3d6:	80 83       	st	Z, r24
      Usb_reset_endpoint(EP_HID_IN);
 3d8:	aa ee       	ldi	r26, 0xEA	; 234
 3da:	b0 e0       	ldi	r27, 0x00	; 0
 3dc:	92 e0       	ldi	r25, 0x02	; 2
 3de:	9c 93       	st	X, r25
 3e0:	1c 92       	st	X, r1
      Usb_reset_data_toggle();
 3e2:	80 81       	ld	r24, Z
 3e4:	88 60       	ori	r24, 0x08	; 8
 3e6:	80 83       	st	Z, r24
      Usb_select_endpoint(EP_HID_OUT);
 3e8:	98 83       	st	Y, r25
      Usb_disable_stall_handshake();
 3ea:	80 81       	ld	r24, Z
 3ec:	80 61       	ori	r24, 0x10	; 16
 3ee:	80 83       	st	Z, r24
      Usb_reset_endpoint(EP_HID_OUT);
 3f0:	84 e0       	ldi	r24, 0x04	; 4
 3f2:	8c 93       	st	X, r24
 3f4:	1c 92       	st	X, r1
      Usb_reset_data_toggle();
 3f6:	80 81       	ld	r24, Z
 3f8:	88 60       	ori	r24, 0x08	; 8
 3fa:	80 83       	st	Z, r24
   }
}
 3fc:	df 91       	pop	r29
 3fe:	cf 91       	pop	r28
 400:	08 95       	ret

00000402 <usb_user_get_descriptor>:
//!
//! @return FALSE, if the global descriptor no filled
//!
Bool usb_user_get_descriptor(U8 type, U8 string)
{
   switch(type)
 402:	83 30       	cpi	r24, 0x03	; 3
 404:	39 f5       	brne	.+78     	; 0x454 <usb_user_get_descriptor+0x52>
   {
      case DESCRIPTOR_STRING:
      switch (string)
 406:	61 30       	cpi	r22, 0x01	; 1
 408:	79 f0       	breq	.+30     	; 0x428 <usb_user_get_descriptor+0x26>
 40a:	18 f0       	brcs	.+6      	; 0x412 <usb_user_get_descriptor+0x10>
 40c:	62 30       	cpi	r22, 0x02	; 2
 40e:	b9 f0       	breq	.+46     	; 0x43e <usb_user_get_descriptor+0x3c>
 410:	23 c0       	rjmp	.+70     	; 0x458 <usb_user_get_descriptor+0x56>
      {
         case LANG_ID:
         data_to_transfer = sizeof (usb_user_language_id);
 412:	84 e0       	ldi	r24, 0x04	; 4
 414:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <data_to_transfer>
         pbuffer = &(usb_user_language_id.bLength);
 418:	8e ea       	ldi	r24, 0xAE	; 174
 41a:	90 e0       	ldi	r25, 0x00	; 0
 41c:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <pbuffer+0x1>
 420:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <pbuffer>
         return TRUE;
 424:	81 e0       	ldi	r24, 0x01	; 1
 426:	08 95       	ret
         break;
        
         case MAN_INDEX:
         data_to_transfer = sizeof (usb_user_manufacturer_string_descriptor);
 428:	8c e3       	ldi	r24, 0x3C	; 60
 42a:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <data_to_transfer>
         pbuffer = &(usb_user_manufacturer_string_descriptor.bLength);
 42e:	82 ed       	ldi	r24, 0xD2	; 210
 430:	90 e0       	ldi	r25, 0x00	; 0
 432:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <pbuffer+0x1>
 436:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <pbuffer>
         return TRUE;
 43a:	81 e0       	ldi	r24, 0x01	; 1
 43c:	08 95       	ret
         break;
        
         case PROD_INDEX:
         data_to_transfer = sizeof (usb_user_product_string_descriptor);
 43e:	80 e2       	ldi	r24, 0x20	; 32
 440:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <data_to_transfer>
         pbuffer = &(usb_user_product_string_descriptor.bLength);
 444:	82 eb       	ldi	r24, 0xB2	; 178
 446:	90 e0       	ldi	r25, 0x00	; 0
 448:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <pbuffer+0x1>
 44c:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <pbuffer>
         return TRUE;
 450:	81 e0       	ldi	r24, 0x01	; 1
 452:	08 95       	ret
         break;
#endif
      }
      break;
   }
   return FALSE;
 454:	80 e0       	ldi	r24, 0x00	; 0
 456:	08 95       	ret
 458:	80 e0       	ldi	r24, 0x00	; 0
}
 45a:	08 95       	ret

0000045c <hid_get_report_descriptor>:


//! @brief This function manages hit get repport request.
//!
void hid_get_report_descriptor(void)
{
 45c:	cf 93       	push	r28
 45e:	df 93       	push	r29
 460:	00 d0       	rcall	.+0      	; 0x462 <hid_get_report_descriptor+0x6>
 462:	00 d0       	rcall	.+0      	; 0x464 <hid_get_report_descriptor+0x8>
 464:	cd b7       	in	r28, 0x3d	; 61
 466:	de b7       	in	r29, 0x3e	; 62
   U16 wLength;
   U8  nb_byte;
   bit zlp = FALSE;
   U16 wInterface;

   LSB(wInterface)=Usb_read_byte();
 468:	e1 ef       	ldi	r30, 0xF1	; 241
 46a:	f0 e0       	ldi	r31, 0x00	; 0
 46c:	80 81       	ld	r24, Z
 46e:	8b 83       	std	Y+3, r24	; 0x03
   MSB(wInterface)=Usb_read_byte();
 470:	80 81       	ld	r24, Z
 472:	8c 83       	std	Y+4, r24	; 0x04

   data_to_transfer = sizeof(usb_hid_report_descriptor);
 474:	82 e2       	ldi	r24, 0x22	; 34
 476:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <data_to_transfer>
   pbuffer = &(usb_hid_report_descriptor.report[0]);
 47a:	8c e8       	ldi	r24, 0x8C	; 140
 47c:	90 e0       	ldi	r25, 0x00	; 0
 47e:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <pbuffer+0x1>
 482:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <pbuffer>

   LSB(wLength) = Usb_read_byte();
 486:	80 81       	ld	r24, Z
 488:	89 83       	std	Y+1, r24	; 0x01
   MSB(wLength) = Usb_read_byte();
 48a:	80 81       	ld	r24, Z
 48c:	8a 83       	std	Y+2, r24	; 0x02
   Usb_ack_receive_setup();
 48e:	e8 ee       	ldi	r30, 0xE8	; 232
 490:	f0 e0       	ldi	r31, 0x00	; 0
 492:	80 81       	ld	r24, Z
 494:	87 7f       	andi	r24, 0xF7	; 247
 496:	80 83       	st	Z, r24

   if (wLength > data_to_transfer)
 498:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <data_to_transfer>
 49c:	29 81       	ldd	r18, Y+1	; 0x01
 49e:	3a 81       	ldd	r19, Y+2	; 0x02
 4a0:	48 2f       	mov	r20, r24
 4a2:	50 e0       	ldi	r21, 0x00	; 0
 4a4:	42 17       	cp	r20, r18
 4a6:	53 07       	cpc	r21, r19
 4a8:	68 f4       	brcc	.+26     	; 0x4c4 <hid_get_report_descriptor+0x68>
//!
void hid_get_report_descriptor(void)
{
   U16 wLength;
   U8  nb_byte;
   bit zlp = FALSE;
 4aa:	8f 71       	andi	r24, 0x1F	; 31
 4ac:	61 e0       	ldi	r22, 0x01	; 1
 4ae:	09 f0       	breq	.+2      	; 0x4b2 <hid_get_report_descriptor+0x56>
 4b0:	60 e0       	ldi	r22, 0x00	; 0
   else
   {
      data_to_transfer = (U8)wLength;           // send only requested number of data
   }

   while((data_to_transfer != 0) && (!Is_usb_receive_out()))
 4b2:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <data_to_transfer>
 4b6:	88 23       	and	r24, r24
 4b8:	c1 f1       	breq	.+112    	; 0x52a <hid_get_report_descriptor+0xce>
 4ba:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 4be:	82 ff       	sbrs	r24, 2
 4c0:	05 c0       	rjmp	.+10     	; 0x4cc <hid_get_report_descriptor+0x70>
 4c2:	33 c0       	rjmp	.+102    	; 0x52a <hid_get_report_descriptor+0xce>
      if ((data_to_transfer % EP_CONTROL_LENGTH) == 0) { zlp = TRUE; }
      else { zlp = FALSE; }
   }
   else
   {
      data_to_transfer = (U8)wLength;           // send only requested number of data
 4c4:	20 93 0f 01 	sts	0x010F, r18	; 0x80010f <data_to_transfer>
//!
void hid_get_report_descriptor(void)
{
   U16 wLength;
   U8  nb_byte;
   bit zlp = FALSE;
 4c8:	60 e0       	ldi	r22, 0x00	; 0
 4ca:	f3 cf       	rjmp	.-26     	; 0x4b2 <hid_get_report_descriptor+0x56>
      data_to_transfer = (U8)wLength;           // send only requested number of data
   }

   while((data_to_transfer != 0) && (!Is_usb_receive_out()))
   {
      while(!Is_usb_read_control_enabled());
 4cc:	a8 ee       	ldi	r26, 0xE8	; 232
 4ce:	b0 e0       	ldi	r27, 0x00	; 0
            break;
         }
#ifndef __GNUC__
         Usb_write_byte(*pbuffer++);
#else    // AVRGCC does not support point to PGM space
         Usb_write_byte(pgm_read_byte_near((unsigned int)pbuffer++));
 4d0:	41 ef       	ldi	r20, 0xF1	; 241
 4d2:	50 e0       	ldi	r21, 0x00	; 0
      data_to_transfer = (U8)wLength;           // send only requested number of data
   }

   while((data_to_transfer != 0) && (!Is_usb_receive_out()))
   {
      while(!Is_usb_read_control_enabled());
 4d4:	8c 91       	ld	r24, X
 4d6:	80 ff       	sbrs	r24, 0
 4d8:	fd cf       	rjmp	.-6      	; 0x4d4 <hid_get_report_descriptor+0x78>

      nb_byte=0;
      while(data_to_transfer != 0)              // Send data until necessary
 4da:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <data_to_transfer>
 4de:	81 11       	cpse	r24, r1
 4e0:	04 c0       	rjmp	.+8      	; 0x4ea <hid_get_report_descriptor+0x8e>
 4e2:	19 c0       	rjmp	.+50     	; 0x516 <hid_get_report_descriptor+0xba>
 4e4:	91 50       	subi	r25, 0x01	; 1
      {
         if(nb_byte++==EP_CONTROL_LENGTH)       // Check endpoint 0 size
 4e6:	11 f4       	brne	.+4      	; 0x4ec <hid_get_report_descriptor+0x90>
 4e8:	16 c0       	rjmp	.+44     	; 0x516 <hid_get_report_descriptor+0xba>
   while((data_to_transfer != 0) && (!Is_usb_receive_out()))
   {
      while(!Is_usb_read_control_enabled());

      nb_byte=0;
      while(data_to_transfer != 0)              // Send data until necessary
 4ea:	90 e2       	ldi	r25, 0x20	; 32
            break;
         }
#ifndef __GNUC__
         Usb_write_byte(*pbuffer++);
#else    // AVRGCC does not support point to PGM space
         Usb_write_byte(pgm_read_byte_near((unsigned int)pbuffer++));
 4ec:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <pbuffer>
 4f0:	f0 91 11 01 	lds	r31, 0x0111	; 0x800111 <pbuffer+0x1>
 4f4:	9f 01       	movw	r18, r30
 4f6:	2f 5f       	subi	r18, 0xFF	; 255
 4f8:	3f 4f       	sbci	r19, 0xFF	; 255
 4fa:	30 93 11 01 	sts	0x0111, r19	; 0x800111 <pbuffer+0x1>
 4fe:	20 93 10 01 	sts	0x0110, r18	; 0x800110 <pbuffer>
 502:	84 91       	lpm	r24, Z
 504:	fa 01       	movw	r30, r20
 506:	80 83       	st	Z, r24
#endif
         data_to_transfer --;
 508:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <data_to_transfer>
 50c:	81 50       	subi	r24, 0x01	; 1
 50e:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <data_to_transfer>
   while((data_to_transfer != 0) && (!Is_usb_receive_out()))
   {
      while(!Is_usb_read_control_enabled());

      nb_byte=0;
      while(data_to_transfer != 0)              // Send data until necessary
 512:	81 11       	cpse	r24, r1
 514:	e7 cf       	rjmp	.-50     	; 0x4e4 <hid_get_report_descriptor+0x88>
#else    // AVRGCC does not support point to PGM space
         Usb_write_byte(pgm_read_byte_near((unsigned int)pbuffer++));
#endif
         data_to_transfer --;
      }
      Usb_send_control_in();
 516:	8c 91       	ld	r24, X
 518:	8e 7f       	andi	r24, 0xFE	; 254
 51a:	8c 93       	st	X, r24
   else
   {
      data_to_transfer = (U8)wLength;           // send only requested number of data
   }

   while((data_to_transfer != 0) && (!Is_usb_receive_out()))
 51c:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <data_to_transfer>
 520:	88 23       	and	r24, r24
 522:	19 f0       	breq	.+6      	; 0x52a <hid_get_report_descriptor+0xce>
 524:	8c 91       	ld	r24, X
 526:	82 ff       	sbrs	r24, 2
 528:	d5 cf       	rjmp	.-86     	; 0x4d4 <hid_get_report_descriptor+0x78>
         data_to_transfer --;
      }
      Usb_send_control_in();
   }

   if(Is_usb_receive_out())
 52a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 52e:	82 ff       	sbrs	r24, 2
 530:	09 c0       	rjmp	.+18     	; 0x544 <hid_get_report_descriptor+0xe8>
   { 
      // abort from Host
      Usb_ack_receive_out();
 532:	e8 ee       	ldi	r30, 0xE8	; 232
 534:	f0 e0       	ldi	r31, 0x00	; 0
 536:	80 81       	ld	r24, Z
 538:	8b 7f       	andi	r24, 0xFB	; 251
 53a:	80 83       	st	Z, r24
 53c:	80 81       	ld	r24, Z
 53e:	8f 77       	andi	r24, 0x7F	; 127
 540:	80 83       	st	Z, r24
 542:	19 c0       	rjmp	.+50     	; 0x576 <hid_get_report_descriptor+0x11a>
      return;
   }
   if(zlp == TRUE)
 544:	61 30       	cpi	r22, 0x01	; 1
 546:	51 f4       	brne	.+20     	; 0x55c <hid_get_report_descriptor+0x100>
   { 
      while(!Is_usb_read_control_enabled());
 548:	e8 ee       	ldi	r30, 0xE8	; 232
 54a:	f0 e0       	ldi	r31, 0x00	; 0
 54c:	80 81       	ld	r24, Z
 54e:	80 ff       	sbrs	r24, 0
 550:	fd cf       	rjmp	.-6      	; 0x54c <hid_get_report_descriptor+0xf0>
      Usb_send_control_in();
 552:	e8 ee       	ldi	r30, 0xE8	; 232
 554:	f0 e0       	ldi	r31, 0x00	; 0
 556:	80 81       	ld	r24, Z
 558:	8e 7f       	andi	r24, 0xFE	; 254
 55a:	80 83       	st	Z, r24
   }

   while(!Is_usb_receive_out());
 55c:	e8 ee       	ldi	r30, 0xE8	; 232
 55e:	f0 e0       	ldi	r31, 0x00	; 0
 560:	80 81       	ld	r24, Z
 562:	82 ff       	sbrs	r24, 2
 564:	fd cf       	rjmp	.-6      	; 0x560 <hid_get_report_descriptor+0x104>
   Usb_ack_receive_out();
 566:	e8 ee       	ldi	r30, 0xE8	; 232
 568:	f0 e0       	ldi	r31, 0x00	; 0
 56a:	80 81       	ld	r24, Z
 56c:	8b 7f       	andi	r24, 0xFB	; 251
 56e:	80 83       	st	Z, r24
 570:	80 81       	ld	r24, Z
 572:	8f 77       	andi	r24, 0x7F	; 127
 574:	80 83       	st	Z, r24
}
 576:	0f 90       	pop	r0
 578:	0f 90       	pop	r0
 57a:	0f 90       	pop	r0
 57c:	0f 90       	pop	r0
 57e:	df 91       	pop	r29
 580:	cf 91       	pop	r28
 582:	08 95       	ret

00000584 <usb_hid_set_report_ouput>:

//! @brief This function manages hit set report request.
//!
void usb_hid_set_report_ouput (void)
{
   Usb_ack_receive_setup();
 584:	e8 ee       	ldi	r30, 0xE8	; 232
 586:	f0 e0       	ldi	r31, 0x00	; 0
 588:	80 81       	ld	r24, Z
 58a:	87 7f       	andi	r24, 0xF7	; 247
 58c:	80 83       	st	Z, r24
   Usb_send_control_in();
 58e:	80 81       	ld	r24, Z
 590:	8e 7f       	andi	r24, 0xFE	; 254
 592:	80 83       	st	Z, r24

   while(!Is_usb_receive_out());
 594:	80 81       	ld	r24, Z
 596:	82 ff       	sbrs	r24, 2
 598:	fd cf       	rjmp	.-6      	; 0x594 <usb_hid_set_report_ouput+0x10>
   Usb_ack_receive_out();
 59a:	e8 ee       	ldi	r30, 0xE8	; 232
 59c:	f0 e0       	ldi	r31, 0x00	; 0
 59e:	80 81       	ld	r24, Z
 5a0:	8b 7f       	andi	r24, 0xFB	; 251
 5a2:	80 83       	st	Z, r24
 5a4:	80 81       	ld	r24, Z
 5a6:	8f 77       	andi	r24, 0x7F	; 127
 5a8:	80 83       	st	Z, r24
   Usb_send_control_in();
 5aa:	80 81       	ld	r24, Z
 5ac:	8e 7f       	andi	r24, 0xFE	; 254
 5ae:	80 83       	st	Z, r24
 5b0:	08 95       	ret

000005b2 <usb_hid_set_idle>:
//!
//! @param Duration     When the upper byte of wValue is 0 (zero), the duration is indefinite else from 0.004 to 1.020 seconds
//! @param Report ID    0 the idle rate applies to all input reports, else only applies to the Report ID
//!
void usb_hid_set_idle (U8 u8_report_id, U8 u8_duration )
{
 5b2:	cf 93       	push	r28
 5b4:	df 93       	push	r29
 5b6:	00 d0       	rcall	.+0      	; 0x5b8 <usb_hid_set_idle+0x6>
 5b8:	cd b7       	in	r28, 0x3d	; 61
 5ba:	de b7       	in	r29, 0x3e	; 62
   U16 wInterface;
   
   // Get interface number to put in idle mode
   LSB(wInterface)=Usb_read_byte();
 5bc:	e1 ef       	ldi	r30, 0xF1	; 241
 5be:	f0 e0       	ldi	r31, 0x00	; 0
 5c0:	80 81       	ld	r24, Z
 5c2:	89 83       	std	Y+1, r24	; 0x01
   MSB(wInterface)=Usb_read_byte();
 5c4:	80 81       	ld	r24, Z
 5c6:	8a 83       	std	Y+2, r24	; 0x02
   Usb_ack_receive_setup();
 5c8:	e8 ee       	ldi	r30, 0xE8	; 232
 5ca:	f0 e0       	ldi	r31, 0x00	; 0
 5cc:	80 81       	ld	r24, Z
 5ce:	87 7f       	andi	r24, 0xF7	; 247
 5d0:	80 83       	st	Z, r24
  
   g_u8_report_rate = u8_duration;
 5d2:	60 93 02 01 	sts	0x0102, r22	; 0x800102 <g_u8_report_rate>
   
   Usb_send_control_in();
 5d6:	80 81       	ld	r24, Z
 5d8:	8e 7f       	andi	r24, 0xFE	; 254
 5da:	80 83       	st	Z, r24
   while(!Is_usb_in_ready());
 5dc:	80 81       	ld	r24, Z
 5de:	80 ff       	sbrs	r24, 0
 5e0:	fd cf       	rjmp	.-6      	; 0x5dc <usb_hid_set_idle+0x2a>
}
 5e2:	0f 90       	pop	r0
 5e4:	0f 90       	pop	r0
 5e6:	df 91       	pop	r29
 5e8:	cf 91       	pop	r28
 5ea:	08 95       	ret

000005ec <usb_hid_get_idle>:
//! @brief This function manages hid get idle request.
//!
//! @param Report ID    0 the idle rate applies to all input reports, else only applies to the Report ID
//!
void usb_hid_get_idle (U8 u8_report_id)
{
 5ec:	cf 93       	push	r28
 5ee:	df 93       	push	r29
 5f0:	00 d0       	rcall	.+0      	; 0x5f2 <usb_hid_get_idle+0x6>
 5f2:	00 d0       	rcall	.+0      	; 0x5f4 <usb_hid_get_idle+0x8>
 5f4:	cd b7       	in	r28, 0x3d	; 61
 5f6:	de b7       	in	r29, 0x3e	; 62
   U16 wLength;
   U16 wInterface;

   // Get interface number to put in idle mode
   LSB(wInterface)= Usb_read_byte();
 5f8:	e1 ef       	ldi	r30, 0xF1	; 241
 5fa:	f0 e0       	ldi	r31, 0x00	; 0
 5fc:	80 81       	ld	r24, Z
 5fe:	8b 83       	std	Y+3, r24	; 0x03
   MSB(wInterface)= Usb_read_byte();
 600:	80 81       	ld	r24, Z
 602:	8c 83       	std	Y+4, r24	; 0x04
   LSB(wLength)   = Usb_read_byte();
 604:	80 81       	ld	r24, Z
 606:	89 83       	std	Y+1, r24	; 0x01
   MSB(wLength)   = Usb_read_byte();
 608:	80 81       	ld	r24, Z
 60a:	8a 83       	std	Y+2, r24	; 0x02
   Usb_ack_receive_setup();
 60c:	e8 ee       	ldi	r30, 0xE8	; 232
 60e:	f0 e0       	ldi	r31, 0x00	; 0
 610:	80 81       	ld	r24, Z
 612:	87 7f       	andi	r24, 0xF7	; 247
 614:	80 83       	st	Z, r24
   
   if( wLength != 0 )
 616:	89 81       	ldd	r24, Y+1	; 0x01
 618:	9a 81       	ldd	r25, Y+2	; 0x02
 61a:	89 2b       	or	r24, r25
 61c:	39 f0       	breq	.+14     	; 0x62c <usb_hid_get_idle+0x40>
   {
      Usb_write_byte(g_u8_report_rate);
 61e:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <g_u8_report_rate>
 622:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
      Usb_send_control_in();
 626:	80 81       	ld	r24, Z
 628:	8e 7f       	andi	r24, 0xFE	; 254
 62a:	80 83       	st	Z, r24
   }
   
   while(!Is_usb_receive_out());
 62c:	e8 ee       	ldi	r30, 0xE8	; 232
 62e:	f0 e0       	ldi	r31, 0x00	; 0
 630:	80 81       	ld	r24, Z
 632:	82 ff       	sbrs	r24, 2
 634:	fd cf       	rjmp	.-6      	; 0x630 <usb_hid_get_idle+0x44>
   Usb_ack_receive_out();
 636:	e8 ee       	ldi	r30, 0xE8	; 232
 638:	f0 e0       	ldi	r31, 0x00	; 0
 63a:	80 81       	ld	r24, Z
 63c:	8b 7f       	andi	r24, 0xFB	; 251
 63e:	80 83       	st	Z, r24
 640:	80 81       	ld	r24, Z
 642:	8f 77       	andi	r24, 0x7F	; 127
 644:	80 83       	st	Z, r24
}
 646:	0f 90       	pop	r0
 648:	0f 90       	pop	r0
 64a:	0f 90       	pop	r0
 64c:	0f 90       	pop	r0
 64e:	df 91       	pop	r29
 650:	cf 91       	pop	r28
 652:	08 95       	ret

00000654 <usb_hid_set_report_feature>:

void usb_hid_set_report_feature(void)
{

   Usb_ack_receive_setup();
 654:	e8 ee       	ldi	r30, 0xE8	; 232
 656:	f0 e0       	ldi	r31, 0x00	; 0
 658:	80 81       	ld	r24, Z
 65a:	87 7f       	andi	r24, 0xF7	; 247
 65c:	80 83       	st	Z, r24
   Usb_send_control_in();
 65e:	80 81       	ld	r24, Z
 660:	8e 7f       	andi	r24, 0xFE	; 254
 662:	80 83       	st	Z, r24

   while(!Is_usb_receive_out());
 664:	80 81       	ld	r24, Z
 666:	82 ff       	sbrs	r24, 2
 668:	fd cf       	rjmp	.-6      	; 0x664 <usb_hid_set_report_feature+0x10>

   if(Usb_read_byte()==0x55)
 66a:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
 66e:	85 35       	cpi	r24, 0x55	; 85
 670:	79 f4       	brne	.+30     	; 0x690 <usb_hid_set_report_feature+0x3c>
      if(Usb_read_byte()==0xAA)
 672:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
 676:	8a 3a       	cpi	r24, 0xAA	; 170
 678:	59 f4       	brne	.+22     	; 0x690 <usb_hid_set_report_feature+0x3c>
         if(Usb_read_byte()==0x55)
 67a:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
 67e:	85 35       	cpi	r24, 0x55	; 85
 680:	39 f4       	brne	.+14     	; 0x690 <usb_hid_set_report_feature+0x3c>
            if(Usb_read_byte()==0xAA)
 682:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
 686:	8a 3a       	cpi	r24, 0xAA	; 170
 688:	19 f4       	brne	.+6      	; 0x690 <usb_hid_set_report_feature+0x3c>
            {
               jump_bootloader=1;
 68a:	81 e0       	ldi	r24, 0x01	; 1
 68c:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <jump_bootloader>
            }
   Usb_ack_receive_out();
 690:	e8 ee       	ldi	r30, 0xE8	; 232
 692:	f0 e0       	ldi	r31, 0x00	; 0
 694:	80 81       	ld	r24, Z
 696:	8b 7f       	andi	r24, 0xFB	; 251
 698:	80 83       	st	Z, r24
 69a:	80 81       	ld	r24, Z
 69c:	8f 77       	andi	r24, 0x7F	; 127
 69e:	80 83       	st	Z, r24
   Usb_send_control_in();
 6a0:	80 81       	ld	r24, Z
 6a2:	8e 7f       	andi	r24, 0xFE	; 254
 6a4:	80 83       	st	Z, r24
   while(!Is_usb_in_ready());
 6a6:	80 81       	ld	r24, Z
 6a8:	80 ff       	sbrs	r24, 0
 6aa:	fd cf       	rjmp	.-6      	; 0x6a6 <usb_hid_set_report_feature+0x52>
}
 6ac:	08 95       	ret

000006ae <hid_get_hid_descriptor>:

//! @brief This function manages hid get hid descriptor request.
//!
void hid_get_hid_descriptor(void)
{
 6ae:	cf 93       	push	r28
 6b0:	df 93       	push	r29
 6b2:	00 d0       	rcall	.+0      	; 0x6b4 <hid_get_hid_descriptor+0x6>
 6b4:	00 d0       	rcall	.+0      	; 0x6b6 <hid_get_hid_descriptor+0x8>
 6b6:	cd b7       	in	r28, 0x3d	; 61
 6b8:	de b7       	in	r29, 0x3e	; 62
   U16 wLength;
   U8  nb_byte;
   bit zlp=FALSE;
   U16 wInterface;

   LSB(wInterface)=Usb_read_byte();
 6ba:	e1 ef       	ldi	r30, 0xF1	; 241
 6bc:	f0 e0       	ldi	r31, 0x00	; 0
 6be:	80 81       	ld	r24, Z
 6c0:	8b 83       	std	Y+3, r24	; 0x03
   MSB(wInterface)=Usb_read_byte();
 6c2:	80 81       	ld	r24, Z
 6c4:	8c 83       	std	Y+4, r24	; 0x04

   data_to_transfer = sizeof(usb_conf_desc.hid);
 6c6:	89 e0       	ldi	r24, 0x09	; 9
 6c8:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <data_to_transfer>
   pbuffer = &(usb_conf_desc.hid.bLength);
 6cc:	80 e2       	ldi	r24, 0x20	; 32
 6ce:	91 e0       	ldi	r25, 0x01	; 1
 6d0:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <pbuffer+0x1>
 6d4:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <pbuffer>

   LSB(wLength) = Usb_read_byte();
 6d8:	80 81       	ld	r24, Z
 6da:	89 83       	std	Y+1, r24	; 0x01
   MSB(wLength) = Usb_read_byte();
 6dc:	80 81       	ld	r24, Z
 6de:	8a 83       	std	Y+2, r24	; 0x02
   Usb_ack_receive_setup();
 6e0:	e8 ee       	ldi	r30, 0xE8	; 232
 6e2:	f0 e0       	ldi	r31, 0x00	; 0
 6e4:	80 81       	ld	r24, Z
 6e6:	87 7f       	andi	r24, 0xF7	; 247
 6e8:	80 83       	st	Z, r24

   if (wLength > data_to_transfer)
 6ea:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <data_to_transfer>
 6ee:	29 81       	ldd	r18, Y+1	; 0x01
 6f0:	3a 81       	ldd	r19, Y+2	; 0x02
 6f2:	48 2f       	mov	r20, r24
 6f4:	50 e0       	ldi	r21, 0x00	; 0
 6f6:	42 17       	cp	r20, r18
 6f8:	53 07       	cpc	r21, r19
 6fa:	68 f4       	brcc	.+26     	; 0x716 <hid_get_hid_descriptor+0x68>
//!
void hid_get_hid_descriptor(void)
{
   U16 wLength;
   U8  nb_byte;
   bit zlp=FALSE;
 6fc:	8f 71       	andi	r24, 0x1F	; 31
 6fe:	61 e0       	ldi	r22, 0x01	; 1
 700:	09 f0       	breq	.+2      	; 0x704 <hid_get_hid_descriptor+0x56>
 702:	60 e0       	ldi	r22, 0x00	; 0
   else
   {
      data_to_transfer = (U8)wLength;           // send only requested number of data
   }

   while((data_to_transfer != 0) && (!Is_usb_receive_out()))
 704:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <data_to_transfer>
 708:	88 23       	and	r24, r24
 70a:	c1 f1       	breq	.+112    	; 0x77c <hid_get_hid_descriptor+0xce>
 70c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 710:	82 ff       	sbrs	r24, 2
 712:	05 c0       	rjmp	.+10     	; 0x71e <hid_get_hid_descriptor+0x70>
 714:	33 c0       	rjmp	.+102    	; 0x77c <hid_get_hid_descriptor+0xce>
      if ((data_to_transfer % EP_CONTROL_LENGTH) == 0) { zlp = TRUE; }
      else { zlp = FALSE; }                     // no need of zero length packet
   }
   else
   {
      data_to_transfer = (U8)wLength;           // send only requested number of data
 716:	20 93 0f 01 	sts	0x010F, r18	; 0x80010f <data_to_transfer>
//!
void hid_get_hid_descriptor(void)
{
   U16 wLength;
   U8  nb_byte;
   bit zlp=FALSE;
 71a:	60 e0       	ldi	r22, 0x00	; 0
 71c:	f3 cf       	rjmp	.-26     	; 0x704 <hid_get_hid_descriptor+0x56>
      data_to_transfer = (U8)wLength;           // send only requested number of data
   }

   while((data_to_transfer != 0) && (!Is_usb_receive_out()))
   {
      while(!Is_usb_read_control_enabled());
 71e:	a8 ee       	ldi	r26, 0xE8	; 232
 720:	b0 e0       	ldi	r27, 0x00	; 0
            break;
         }
#ifndef __GNUC__
         Usb_write_byte(*pbuffer++);
#else    // AVRGCC does not support point to PGM space
         Usb_write_byte(pgm_read_byte_near((unsigned int)pbuffer++));
 722:	41 ef       	ldi	r20, 0xF1	; 241
 724:	50 e0       	ldi	r21, 0x00	; 0
      data_to_transfer = (U8)wLength;           // send only requested number of data
   }

   while((data_to_transfer != 0) && (!Is_usb_receive_out()))
   {
      while(!Is_usb_read_control_enabled());
 726:	8c 91       	ld	r24, X
 728:	80 ff       	sbrs	r24, 0
 72a:	fd cf       	rjmp	.-6      	; 0x726 <hid_get_hid_descriptor+0x78>

      nb_byte=0;
      while(data_to_transfer != 0)              // Send data until necessary
 72c:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <data_to_transfer>
 730:	81 11       	cpse	r24, r1
 732:	04 c0       	rjmp	.+8      	; 0x73c <hid_get_hid_descriptor+0x8e>
 734:	19 c0       	rjmp	.+50     	; 0x768 <hid_get_hid_descriptor+0xba>
 736:	91 50       	subi	r25, 0x01	; 1
      {
         if(nb_byte++==EP_CONTROL_LENGTH)       // Check endpoint 0 size
 738:	11 f4       	brne	.+4      	; 0x73e <hid_get_hid_descriptor+0x90>
 73a:	16 c0       	rjmp	.+44     	; 0x768 <hid_get_hid_descriptor+0xba>
   while((data_to_transfer != 0) && (!Is_usb_receive_out()))
   {
      while(!Is_usb_read_control_enabled());

      nb_byte=0;
      while(data_to_transfer != 0)              // Send data until necessary
 73c:	90 e2       	ldi	r25, 0x20	; 32
            break;
         }
#ifndef __GNUC__
         Usb_write_byte(*pbuffer++);
#else    // AVRGCC does not support point to PGM space
         Usb_write_byte(pgm_read_byte_near((unsigned int)pbuffer++));
 73e:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <pbuffer>
 742:	f0 91 11 01 	lds	r31, 0x0111	; 0x800111 <pbuffer+0x1>
 746:	9f 01       	movw	r18, r30
 748:	2f 5f       	subi	r18, 0xFF	; 255
 74a:	3f 4f       	sbci	r19, 0xFF	; 255
 74c:	30 93 11 01 	sts	0x0111, r19	; 0x800111 <pbuffer+0x1>
 750:	20 93 10 01 	sts	0x0110, r18	; 0x800110 <pbuffer>
 754:	84 91       	lpm	r24, Z
 756:	fa 01       	movw	r30, r20
 758:	80 83       	st	Z, r24
#endif
         data_to_transfer --;
 75a:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <data_to_transfer>
 75e:	81 50       	subi	r24, 0x01	; 1
 760:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <data_to_transfer>
   while((data_to_transfer != 0) && (!Is_usb_receive_out()))
   {
      while(!Is_usb_read_control_enabled());

      nb_byte=0;
      while(data_to_transfer != 0)              // Send data until necessary
 764:	81 11       	cpse	r24, r1
 766:	e7 cf       	rjmp	.-50     	; 0x736 <hid_get_hid_descriptor+0x88>
#else    // AVRGCC does not support point to PGM space
         Usb_write_byte(pgm_read_byte_near((unsigned int)pbuffer++));
#endif
         data_to_transfer --;
      }
      Usb_send_control_in();
 768:	8c 91       	ld	r24, X
 76a:	8e 7f       	andi	r24, 0xFE	; 254
 76c:	8c 93       	st	X, r24
   else
   {
      data_to_transfer = (U8)wLength;           // send only requested number of data
   }

   while((data_to_transfer != 0) && (!Is_usb_receive_out()))
 76e:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <data_to_transfer>
 772:	88 23       	and	r24, r24
 774:	19 f0       	breq	.+6      	; 0x77c <hid_get_hid_descriptor+0xce>
 776:	8c 91       	ld	r24, X
 778:	82 ff       	sbrs	r24, 2
 77a:	d5 cf       	rjmp	.-86     	; 0x726 <hid_get_hid_descriptor+0x78>
         data_to_transfer --;
      }
      Usb_send_control_in();
   }

   if(Is_usb_receive_out())
 77c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 780:	82 ff       	sbrs	r24, 2
 782:	09 c0       	rjmp	.+18     	; 0x796 <hid_get_hid_descriptor+0xe8>
   { 
      // abort from Host
      Usb_ack_receive_out();
 784:	e8 ee       	ldi	r30, 0xE8	; 232
 786:	f0 e0       	ldi	r31, 0x00	; 0
 788:	80 81       	ld	r24, Z
 78a:	8b 7f       	andi	r24, 0xFB	; 251
 78c:	80 83       	st	Z, r24
 78e:	80 81       	ld	r24, Z
 790:	8f 77       	andi	r24, 0x7F	; 127
 792:	80 83       	st	Z, r24
 794:	19 c0       	rjmp	.+50     	; 0x7c8 <hid_get_hid_descriptor+0x11a>
      return;
   }
   if(zlp == TRUE)
 796:	61 30       	cpi	r22, 0x01	; 1
 798:	51 f4       	brne	.+20     	; 0x7ae <hid_get_hid_descriptor+0x100>
   { 
      while(!Is_usb_read_control_enabled());
 79a:	e8 ee       	ldi	r30, 0xE8	; 232
 79c:	f0 e0       	ldi	r31, 0x00	; 0
 79e:	80 81       	ld	r24, Z
 7a0:	80 ff       	sbrs	r24, 0
 7a2:	fd cf       	rjmp	.-6      	; 0x79e <hid_get_hid_descriptor+0xf0>
      Usb_send_control_in();
 7a4:	e8 ee       	ldi	r30, 0xE8	; 232
 7a6:	f0 e0       	ldi	r31, 0x00	; 0
 7a8:	80 81       	ld	r24, Z
 7aa:	8e 7f       	andi	r24, 0xFE	; 254
 7ac:	80 83       	st	Z, r24
   }

   while(!Is_usb_receive_out());
 7ae:	e8 ee       	ldi	r30, 0xE8	; 232
 7b0:	f0 e0       	ldi	r31, 0x00	; 0
 7b2:	80 81       	ld	r24, Z
 7b4:	82 ff       	sbrs	r24, 2
 7b6:	fd cf       	rjmp	.-6      	; 0x7b2 <hid_get_hid_descriptor+0x104>
   Usb_ack_receive_out();
 7b8:	e8 ee       	ldi	r30, 0xE8	; 232
 7ba:	f0 e0       	ldi	r31, 0x00	; 0
 7bc:	80 81       	ld	r24, Z
 7be:	8b 7f       	andi	r24, 0xFB	; 251
 7c0:	80 83       	st	Z, r24
 7c2:	80 81       	ld	r24, Z
 7c4:	8f 77       	andi	r24, 0x7F	; 127
 7c6:	80 83       	st	Z, r24
}
 7c8:	0f 90       	pop	r0
 7ca:	0f 90       	pop	r0
 7cc:	0f 90       	pop	r0
 7ce:	0f 90       	pop	r0
 7d0:	df 91       	pop	r29
 7d2:	cf 91       	pop	r28
 7d4:	08 95       	ret

000007d6 <usb_user_read_request>:
{
   U8    wValue_msb;
   U8    wValue_lsb;

   // Read wValue
   wValue_lsb = Usb_read_byte();
 7d6:	e1 ef       	ldi	r30, 0xF1	; 241
 7d8:	f0 e0       	ldi	r31, 0x00	; 0
 7da:	20 81       	ld	r18, Z
   wValue_msb = Usb_read_byte();
 7dc:	90 81       	ld	r25, Z

   //** Specific request from Class HID
   if( USB_SETUP_GET_STAND_INTERFACE == type )
 7de:	81 38       	cpi	r24, 0x81	; 129
 7e0:	79 f4       	brne	.+30     	; 0x800 <usb_user_read_request+0x2a>
   {
      switch( request )
 7e2:	66 30       	cpi	r22, 0x06	; 6
 7e4:	69 f4       	brne	.+26     	; 0x800 <usb_user_read_request+0x2a>
      {
         case SETUP_GET_DESCRIPTOR:
         switch( wValue_msb ) // Descriptor ID
 7e6:	91 32       	cpi	r25, 0x21	; 33
 7e8:	19 f0       	breq	.+6      	; 0x7f0 <usb_user_read_request+0x1a>
 7ea:	92 32       	cpi	r25, 0x22	; 34
 7ec:	29 f0       	breq	.+10     	; 0x7f8 <usb_user_read_request+0x22>
 7ee:	08 c0       	rjmp	.+16     	; 0x800 <usb_user_read_request+0x2a>
         {
            case DESCRIPTOR_HID:
            hid_get_hid_descriptor();
 7f0:	0e 94 57 03 	call	0x6ae	; 0x6ae <hid_get_hid_descriptor>
            return TRUE;
 7f4:	81 e0       	ldi	r24, 0x01	; 1
 7f6:	08 95       	ret
            break;
   
            case DESCRIPTOR_REPORT:
            hid_get_report_descriptor();
 7f8:	0e 94 2e 02 	call	0x45c	; 0x45c <hid_get_report_descriptor>
            return TRUE;
 7fc:	81 e0       	ldi	r24, 0x01	; 1
 7fe:	08 95       	ret
            break;
         }
         break;
      }
   }
   if( USB_SETUP_SET_CLASS_INTER == type )
 800:	81 32       	cpi	r24, 0x21	; 33
 802:	c1 f4       	brne	.+48     	; 0x834 <usb_user_read_request+0x5e>
   {
      switch( request )
 804:	69 30       	cpi	r22, 0x09	; 9
 806:	19 f0       	breq	.+6      	; 0x80e <usb_user_read_request+0x38>
 808:	6a 30       	cpi	r22, 0x0A	; 10
 80a:	71 f0       	breq	.+28     	; 0x828 <usb_user_read_request+0x52>
 80c:	13 c0       	rjmp	.+38     	; 0x834 <usb_user_read_request+0x5e>
      {
         case SETUP_HID_SET_REPORT:
         // The MSB wValue field specifies the Report Type
         // The LSB wValue field specifies the Report ID
         switch (wValue_msb)
 80e:	92 30       	cpi	r25, 0x02	; 2
 810:	19 f0       	breq	.+6      	; 0x818 <usb_user_read_request+0x42>
 812:	93 30       	cpi	r25, 0x03	; 3
 814:	29 f0       	breq	.+10     	; 0x820 <usb_user_read_request+0x4a>
 816:	0e c0       	rjmp	.+28     	; 0x834 <usb_user_read_request+0x5e>
            case REPORT_TYPE_INPUT:
            // TODO
            break;
            
            case REPORT_TYPE_OUTPUT:
            usb_hid_set_report_ouput();
 818:	0e 94 c2 02 	call	0x584	; 0x584 <usb_hid_set_report_ouput>
            return TRUE;
 81c:	81 e0       	ldi	r24, 0x01	; 1
 81e:	08 95       	ret
            break;

            case REPORT_TYPE_FEATURE:
            usb_hid_set_report_feature();
 820:	0e 94 2a 03 	call	0x654	; 0x654 <usb_hid_set_report_feature>
            return TRUE;
 824:	81 e0       	ldi	r24, 0x01	; 1
 826:	08 95       	ret
            break;
         }
         break;

         case SETUP_HID_SET_IDLE:
         usb_hid_set_idle(wValue_lsb,wValue_msb);
 828:	69 2f       	mov	r22, r25
 82a:	82 2f       	mov	r24, r18
 82c:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <usb_hid_set_idle>
         return TRUE;
 830:	81 e0       	ldi	r24, 0x01	; 1
 832:	08 95       	ret
         case SETUP_HID_SET_PROTOCOL:
         // TODO
         break;
      }
   }
   if( USB_SETUP_GET_CLASS_INTER == type )
 834:	81 3a       	cpi	r24, 0xA1	; 161
 836:	39 f4       	brne	.+14     	; 0x846 <usb_user_read_request+0x70>
   {
      switch( request )
 838:	62 30       	cpi	r22, 0x02	; 2
 83a:	39 f4       	brne	.+14     	; 0x84a <usb_user_read_request+0x74>
      {
         case SETUP_HID_GET_REPORT:
         // TODO
         break;
         case SETUP_HID_GET_IDLE:
         usb_hid_get_idle(wValue_lsb);
 83c:	82 2f       	mov	r24, r18
 83e:	0e 94 f6 02 	call	0x5ec	; 0x5ec <usb_hid_get_idle>
         return TRUE;
 842:	81 e0       	ldi	r24, 0x01	; 1
 844:	08 95       	ret
         case SETUP_HID_GET_PROTOCOL:
         // TODO
         break;
      }
   }
   return FALSE;  // No supported request
 846:	80 e0       	ldi	r24, 0x00	; 0
 848:	08 95       	ret
 84a:	80 e0       	ldi	r24, 0x00	; 0
}
 84c:	08 95       	ret

0000084e <usb_process_request>:
//! @brief This function reads the SETUP request sent to the default control endpoint
//! and calls the appropriate function. When exiting of the usb_read_request
//! function, the device is ready to manage the next request.
//!
void usb_process_request(void)
{
 84e:	0f 93       	push	r16
 850:	1f 93       	push	r17
 852:	cf 93       	push	r28
 854:	df 93       	push	r29
 856:	00 d0       	rcall	.+0      	; 0x858 <usb_process_request+0xa>
 858:	cd b7       	in	r28, 0x3d	; 61
 85a:	de b7       	in	r29, 0x3e	; 62
   U8 bmRequestType;
   U8 bmRequest;

   Usb_ack_control_out();
 85c:	e8 ee       	ldi	r30, 0xE8	; 232
 85e:	f0 e0       	ldi	r31, 0x00	; 0
 860:	80 81       	ld	r24, Z
 862:	8b 7f       	andi	r24, 0xFB	; 251
 864:	80 83       	st	Z, r24
   bmRequestType = Usb_read_byte();
 866:	e1 ef       	ldi	r30, 0xF1	; 241
 868:	f0 e0       	ldi	r31, 0x00	; 0
 86a:	10 81       	ld	r17, Z
   bmRequest     = Usb_read_byte();
 86c:	00 81       	ld	r16, Z

   switch (bmRequest)
 86e:	80 2f       	mov	r24, r16
 870:	90 e0       	ldi	r25, 0x00	; 0
 872:	8c 30       	cpi	r24, 0x0C	; 12
 874:	91 05       	cpc	r25, r1
 876:	08 f0       	brcs	.+2      	; 0x87a <usb_process_request+0x2c>
 878:	06 c2       	rjmp	.+1036   	; 0xc86 <usb_process_request+0x438>
 87a:	fc 01       	movw	r30, r24
 87c:	e6 5c       	subi	r30, 0xC6	; 198
 87e:	ff 4f       	sbci	r31, 0xFF	; 255
 880:	0c 94 9c 07 	jmp	0xf38	; 0xf38 <__tablejump2__>
   {
      case SETUP_GET_DESCRIPTOR:
      if (USB_SETUP_GET_STAND_DEVICE == bmRequestType)
 884:	10 38       	cpi	r17, 0x80	; 128
 886:	09 f0       	breq	.+2      	; 0x88a <usb_process_request+0x3c>
 888:	fe c1       	rjmp	.+1020   	; 0xc86 <usb_process_request+0x438>
   U16  sn_index=0;
   U8   initial_data_to_transfer;
#endif
    
   zlp             = FALSE;                  /* no zero length packet */
   string_type     = Usb_read_byte();        /* read LSB of wValue    */
 88a:	e1 ef       	ldi	r30, 0xF1	; 241
 88c:	f0 e0       	ldi	r31, 0x00	; 0
 88e:	60 81       	ld	r22, Z
   descriptor_type = Usb_read_byte();        /* read MSB of wValue    */
 890:	80 81       	ld	r24, Z

   switch (descriptor_type)
 892:	81 30       	cpi	r24, 0x01	; 1
 894:	19 f0       	breq	.+6      	; 0x89c <usb_process_request+0x4e>
 896:	82 30       	cpi	r24, 0x02	; 2
 898:	59 f0       	breq	.+22     	; 0x8b0 <usb_process_request+0x62>
 89a:	14 c0       	rjmp	.+40     	; 0x8c4 <usb_process_request+0x76>
   {
      case DESCRIPTOR_DEVICE:
      data_to_transfer = Usb_get_dev_desc_length(); //!< sizeof (usb_user_device_descriptor);
 89c:	82 e1       	ldi	r24, 0x12	; 18
 89e:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <data_to_transfer>
      pbuffer          = Usb_get_dev_desc_pointer();
 8a2:	87 e3       	ldi	r24, 0x37	; 55
 8a4:	91 e0       	ldi	r25, 0x01	; 1
 8a6:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <pbuffer+0x1>
 8aa:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <pbuffer>
 8ae:	0f c0       	rjmp	.+30     	; 0x8ce <usb_process_request+0x80>
      break;
      
      case DESCRIPTOR_CONFIGURATION:
      data_to_transfer = Usb_get_conf_desc_length(); //!< sizeof (usb_user_configuration_descriptor);
 8b0:	89 e2       	ldi	r24, 0x29	; 41
 8b2:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <data_to_transfer>
      pbuffer          = Usb_get_conf_desc_pointer();
 8b6:	8e e0       	ldi	r24, 0x0E	; 14
 8b8:	91 e0       	ldi	r25, 0x01	; 1
 8ba:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <pbuffer+0x1>
 8be:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <pbuffer>
 8c2:	05 c0       	rjmp	.+10     	; 0x8ce <usb_process_request+0x80>
      break;
      
      default:
      if( !usb_user_get_descriptor(descriptor_type, string_type))
 8c4:	0e 94 01 02 	call	0x402	; 0x402 <usb_user_get_descriptor>
 8c8:	88 23       	and	r24, r24
 8ca:	09 f4       	brne	.+2      	; 0x8ce <usb_process_request+0x80>
 8cc:	dc c1       	rjmp	.+952    	; 0xc86 <usb_process_request+0x438>
         return FALSE;  // Unknow descriptor then stall request
      break;
   }

   dummy = Usb_read_byte();                     //!< don't care of wIndex field
 8ce:	e1 ef       	ldi	r30, 0xF1	; 241
 8d0:	f0 e0       	ldi	r31, 0x00	; 0
 8d2:	80 81       	ld	r24, Z
   dummy = Usb_read_byte();
 8d4:	80 81       	ld	r24, Z
   LSB(wLength) = Usb_read_byte();              //!< read wLength
 8d6:	80 81       	ld	r24, Z
 8d8:	89 83       	std	Y+1, r24	; 0x01
   MSB(wLength) = Usb_read_byte();
 8da:	80 81       	ld	r24, Z
 8dc:	8a 83       	std	Y+2, r24	; 0x02
   Usb_ack_receive_setup() ;                  //!< clear the receive setup flag
 8de:	e8 ee       	ldi	r30, 0xE8	; 232
 8e0:	f0 e0       	ldi	r31, 0x00	; 0
 8e2:	80 81       	ld	r24, Z
 8e4:	87 7f       	andi	r24, 0xF7	; 247
 8e6:	80 83       	st	Z, r24

   if (wLength > data_to_transfer)
 8e8:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <data_to_transfer>
 8ec:	29 81       	ldd	r18, Y+1	; 0x01
 8ee:	3a 81       	ldd	r19, Y+2	; 0x02
 8f0:	48 2f       	mov	r20, r24
 8f2:	50 e0       	ldi	r21, 0x00	; 0
 8f4:	42 17       	cp	r20, r18
 8f6:	53 07       	cpc	r21, r19
 8f8:	70 f4       	brcc	.+28     	; 0x916 <usb_process_request+0xc8>
   {
      if ((data_to_transfer % EP_CONTROL_LENGTH) == 0) { zlp = TRUE; }
 8fa:	8f 71       	andi	r24, 0x1F	; 31
 8fc:	61 e0       	ldi	r22, 0x01	; 1
 8fe:	09 f0       	breq	.+2      	; 0x902 <usb_process_request+0xb4>
 900:	60 e0       	ldi	r22, 0x00	; 0
   else
   {
      data_to_transfer = (U8)wLength;         //!< send only requested number of data
   }

   Usb_ack_nak_out();
 902:	e8 ee       	ldi	r30, 0xE8	; 232
 904:	f0 e0       	ldi	r31, 0x00	; 0
 906:	80 81       	ld	r24, Z
 908:	8f 7e       	andi	r24, 0xEF	; 239
 90a:	80 83       	st	Z, r24
    
   byte_to_send=0;
#if (USE_DEVICE_SN_UNIQUE==ENABLE)
   initial_data_to_transfer = data_to_transfer;
#endif
   while((data_to_transfer != 0) && (!Is_usb_nak_out_sent()))
 90c:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <data_to_transfer>
 910:	81 11       	cpse	r24, r1
 912:	0d c0       	rjmp	.+26     	; 0x92e <usb_process_request+0xe0>
 914:	44 c0       	rjmp	.+136    	; 0x99e <usb_process_request+0x150>
      if ((data_to_transfer % EP_CONTROL_LENGTH) == 0) { zlp = TRUE; }
      else { zlp = FALSE; }                   //!< no need of zero length packet
   }
   else
   {
      data_to_transfer = (U8)wLength;         //!< send only requested number of data
 916:	20 93 0f 01 	sts	0x010F, r18	; 0x80010f <data_to_transfer>
   }

   Usb_ack_nak_out();
 91a:	e8 ee       	ldi	r30, 0xE8	; 232
 91c:	f0 e0       	ldi	r31, 0x00	; 0
 91e:	80 81       	ld	r24, Z
 920:	8f 7e       	andi	r24, 0xEF	; 239
 922:	80 83       	st	Z, r24
    
   byte_to_send=0;
#if (USE_DEVICE_SN_UNIQUE==ENABLE)
   initial_data_to_transfer = data_to_transfer;
#endif
   while((data_to_transfer != 0) && (!Is_usb_nak_out_sent()))
 924:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <data_to_transfer>
 928:	81 11       	cpse	r24, r1
 92a:	c6 c1       	rjmp	.+908    	; 0xcb8 <usb_process_request+0x46a>
 92c:	48 c0       	rjmp	.+144    	; 0x9be <usb_process_request+0x170>
 92e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 932:	84 ff       	sbrs	r24, 4
 934:	06 c0       	rjmp	.+12     	; 0x942 <usb_process_request+0xf4>
 936:	33 c0       	rjmp	.+102    	; 0x99e <usb_process_request+0x150>
   {
      while(!Is_usb_read_control_enabled())
      {
         if (Is_usb_nak_out_sent())
 938:	8c 91       	ld	r24, X
 93a:	84 ff       	sbrs	r24, 4
 93c:	06 c0       	rjmp	.+12     	; 0x94a <usb_process_request+0xfc>
 93e:	b7 c1       	rjmp	.+878    	; 0xcae <usb_process_request+0x460>
#if (USE_DEVICE_SN_UNIQUE==ENABLE)
   U16  sn_index=0;
   U8   initial_data_to_transfer;
#endif
    
   zlp             = FALSE;                  /* no zero length packet */
 940:	60 e0       	ldi	r22, 0x00	; 0
#if (USE_DEVICE_SN_UNIQUE==ENABLE)
   initial_data_to_transfer = data_to_transfer;
#endif
   while((data_to_transfer != 0) && (!Is_usb_nak_out_sent()))
   {
      while(!Is_usb_read_control_enabled())
 942:	a8 ee       	ldi	r26, 0xE8	; 232
 944:	b0 e0       	ldi	r27, 0x00	; 0
         else
         {
            Usb_write_PGM_byte(pbuffer++);                                                 //Write a flash byte to USB        
         }        
#else          
         Usb_write_PGM_byte(pbuffer++);          
 946:	41 ef       	ldi	r20, 0xF1	; 241
 948:	50 e0       	ldi	r21, 0x00	; 0
#if (USE_DEVICE_SN_UNIQUE==ENABLE)
   initial_data_to_transfer = data_to_transfer;
#endif
   while((data_to_transfer != 0) && (!Is_usb_nak_out_sent()))
   {
      while(!Is_usb_read_control_enabled())
 94a:	8c 91       	ld	r24, X
 94c:	80 ff       	sbrs	r24, 0
 94e:	f4 cf       	rjmp	.-24     	; 0x938 <usb_process_request+0xea>
 950:	ae c1       	rjmp	.+860    	; 0xcae <usb_process_request+0x460>
 952:	91 50       	subi	r25, 0x01	; 1
      }
              
      nb_byte=0;
      while(data_to_transfer != 0)        //!< Send data until necessary
      {
         if(nb_byte++==EP_CONTROL_LENGTH) //!< Check endpoint 0 size
 954:	11 f4       	brne	.+4      	; 0x95a <usb_process_request+0x10c>
 956:	16 c0       	rjmp	.+44     	; 0x984 <usb_process_request+0x136>
         if (Is_usb_nak_out_sent())
            break;    // don't clear the flag now, it will be cleared after
      }
              
      nb_byte=0;
      while(data_to_transfer != 0)        //!< Send data until necessary
 958:	90 e2       	ldi	r25, 0x20	; 32
         else
         {
            Usb_write_PGM_byte(pbuffer++);                                                 //Write a flash byte to USB        
         }        
#else          
         Usb_write_PGM_byte(pbuffer++);          
 95a:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <pbuffer>
 95e:	f0 91 11 01 	lds	r31, 0x0111	; 0x800111 <pbuffer+0x1>
 962:	9f 01       	movw	r18, r30
 964:	2f 5f       	subi	r18, 0xFF	; 255
 966:	3f 4f       	sbci	r19, 0xFF	; 255
 968:	30 93 11 01 	sts	0x0111, r19	; 0x800111 <pbuffer+0x1>
 96c:	20 93 10 01 	sts	0x0110, r18	; 0x800110 <pbuffer>
 970:	84 91       	lpm	r24, Z
 972:	fa 01       	movw	r30, r20
 974:	80 83       	st	Z, r24
#endif
         data_to_transfer --;                                                             //decrements the number of bytes to transmit.
 976:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <data_to_transfer>
 97a:	81 50       	subi	r24, 0x01	; 1
 97c:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <data_to_transfer>
         if (Is_usb_nak_out_sent())
            break;    // don't clear the flag now, it will be cleared after
      }
              
      nb_byte=0;
      while(data_to_transfer != 0)        //!< Send data until necessary
 980:	81 11       	cpse	r24, r1
 982:	e7 cf       	rjmp	.-50     	; 0x952 <usb_process_request+0x104>
         Usb_write_PGM_byte(pbuffer++);          
#endif
         data_to_transfer --;                                                             //decrements the number of bytes to transmit.
      }
      
      if (Is_usb_nak_out_sent())
 984:	8c 91       	ld	r24, X
 986:	84 fd       	sbrc	r24, 4
 988:	0a c0       	rjmp	.+20     	; 0x99e <usb_process_request+0x150>
         break;
      else
         Usb_send_control_in();
 98a:	8c 91       	ld	r24, X
 98c:	8e 7f       	andi	r24, 0xFE	; 254
 98e:	8c 93       	st	X, r24
    
   byte_to_send=0;
#if (USE_DEVICE_SN_UNIQUE==ENABLE)
   initial_data_to_transfer = data_to_transfer;
#endif
   while((data_to_transfer != 0) && (!Is_usb_nak_out_sent()))
 990:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <data_to_transfer>
 994:	88 23       	and	r24, r24
 996:	19 f0       	breq	.+6      	; 0x99e <usb_process_request+0x150>
 998:	8c 91       	ld	r24, X
 99a:	84 ff       	sbrs	r24, 4
 99c:	d6 cf       	rjmp	.-84     	; 0x94a <usb_process_request+0xfc>
   
#if (USE_DEVICE_SN_UNIQUE==ENABLE)      
   f_get_serial_string=FALSE;                                                   //end of signature transmission    
#endif   

   if((zlp == TRUE) && (!Is_usb_nak_out_sent()))
 99e:	61 30       	cpi	r22, 0x01	; 1
 9a0:	71 f4       	brne	.+28     	; 0x9be <usb_process_request+0x170>
 9a2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 9a6:	84 fd       	sbrc	r24, 4
 9a8:	0a c0       	rjmp	.+20     	; 0x9be <usb_process_request+0x170>
   {
      while(!Is_usb_read_control_enabled());
 9aa:	e8 ee       	ldi	r30, 0xE8	; 232
 9ac:	f0 e0       	ldi	r31, 0x00	; 0
 9ae:	80 81       	ld	r24, Z
 9b0:	80 ff       	sbrs	r24, 0
 9b2:	fd cf       	rjmp	.-6      	; 0x9ae <usb_process_request+0x160>
      Usb_send_control_in();
 9b4:	e8 ee       	ldi	r30, 0xE8	; 232
 9b6:	f0 e0       	ldi	r31, 0x00	; 0
 9b8:	80 81       	ld	r24, Z
 9ba:	8e 7f       	andi	r24, 0xFE	; 254
 9bc:	80 83       	st	Z, r24
   }

   while (!(Is_usb_nak_out_sent()));
 9be:	e8 ee       	ldi	r30, 0xE8	; 232
 9c0:	f0 e0       	ldi	r31, 0x00	; 0
 9c2:	80 81       	ld	r24, Z
 9c4:	84 ff       	sbrs	r24, 4
 9c6:	fd cf       	rjmp	.-6      	; 0x9c2 <usb_process_request+0x174>
   Usb_ack_nak_out();
 9c8:	e8 ee       	ldi	r30, 0xE8	; 232
 9ca:	f0 e0       	ldi	r31, 0x00	; 0
 9cc:	80 81       	ld	r24, Z
 9ce:	8f 7e       	andi	r24, 0xEF	; 239
 9d0:	80 83       	st	Z, r24
   Usb_ack_control_out();
 9d2:	80 81       	ld	r24, Z
 9d4:	8b 7f       	andi	r24, 0xFB	; 251
 9d6:	80 83       	st	Z, r24
 9d8:	74 c1       	rjmp	.+744    	; 0xcc2 <usb_process_request+0x474>
            return;
      }
      break;

      case SETUP_GET_CONFIGURATION:
      if (USB_SETUP_GET_STAND_DEVICE == bmRequestType)
 9da:	10 38       	cpi	r17, 0x80	; 128
 9dc:	09 f0       	breq	.+2      	; 0x9e0 <usb_process_request+0x192>
 9de:	53 c1       	rjmp	.+678    	; 0xc86 <usb_process_request+0x438>
//! This function manages the GET CONFIGURATION request. The current
//! configuration number is returned.
//!
void usb_get_configuration(void)
{
   Usb_ack_receive_setup();
 9e0:	e8 ee       	ldi	r30, 0xE8	; 232
 9e2:	f0 e0       	ldi	r31, 0x00	; 0
 9e4:	80 81       	ld	r24, Z
 9e6:	87 7f       	andi	r24, 0xF7	; 247
 9e8:	80 83       	st	Z, r24

   Usb_write_byte(usb_configuration_nb);
 9ea:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <usb_configuration_nb>
 9ee:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
   Usb_ack_in_ready();
 9f2:	80 81       	ld	r24, Z
 9f4:	8e 7f       	andi	r24, 0xFE	; 254
 9f6:	80 83       	st	Z, r24
 9f8:	80 81       	ld	r24, Z
 9fa:	8f 77       	andi	r24, 0x7F	; 127
 9fc:	80 83       	st	Z, r24

   while( !Is_usb_receive_out() );
 9fe:	80 81       	ld	r24, Z
 a00:	82 ff       	sbrs	r24, 2
 a02:	fd cf       	rjmp	.-6      	; 0x9fe <usb_process_request+0x1b0>
   Usb_ack_receive_out();
 a04:	e8 ee       	ldi	r30, 0xE8	; 232
 a06:	f0 e0       	ldi	r31, 0x00	; 0
 a08:	80 81       	ld	r24, Z
 a0a:	8b 7f       	andi	r24, 0xFB	; 251
 a0c:	80 83       	st	Z, r24
 a0e:	80 81       	ld	r24, Z
 a10:	8f 77       	andi	r24, 0x7F	; 127
 a12:	80 83       	st	Z, r24
 a14:	56 c1       	rjmp	.+684    	; 0xcc2 <usb_process_request+0x474>
         return;
      }
      break;

      case SETUP_SET_ADDRESS:
      if (USB_SETUP_SET_STAND_DEVICE == bmRequestType)
 a16:	11 11       	cpse	r17, r1
 a18:	36 c1       	rjmp	.+620    	; 0xc86 <usb_process_request+0x438>
//! This function manages the SET ADDRESS request. When complete, the device
//! will filter the requests using the new address.
//!
void usb_set_address(void)
{
   U8 addr = Usb_read_byte();
 a1a:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
   Usb_configure_address(addr);
 a1e:	e3 ee       	ldi	r30, 0xE3	; 227
 a20:	f0 e0       	ldi	r31, 0x00	; 0
 a22:	90 81       	ld	r25, Z
 a24:	90 78       	andi	r25, 0x80	; 128
 a26:	8f 77       	andi	r24, 0x7F	; 127
 a28:	89 2b       	or	r24, r25
 a2a:	80 83       	st	Z, r24

   Usb_ack_receive_setup();
 a2c:	e8 ee       	ldi	r30, 0xE8	; 232
 a2e:	f0 e0       	ldi	r31, 0x00	; 0
 a30:	80 81       	ld	r24, Z
 a32:	87 7f       	andi	r24, 0xF7	; 247
 a34:	80 83       	st	Z, r24

   Usb_send_control_in();                    // send a ZLP for STATUS phase
 a36:	80 81       	ld	r24, Z
 a38:	8e 7f       	andi	r24, 0xFE	; 254
 a3a:	80 83       	st	Z, r24
   while(!Is_usb_in_ready());                // waits for status phase done
 a3c:	80 81       	ld	r24, Z
 a3e:	80 ff       	sbrs	r24, 0
 a40:	fd cf       	rjmp	.-6      	; 0xa3c <usb_process_request+0x1ee>
                                             // before using the new address
   Usb_enable_address();
 a42:	e3 ee       	ldi	r30, 0xE3	; 227
 a44:	f0 e0       	ldi	r31, 0x00	; 0
 a46:	80 81       	ld	r24, Z
 a48:	80 68       	ori	r24, 0x80	; 128
 a4a:	80 83       	st	Z, r24
 a4c:	3a c1       	rjmp	.+628    	; 0xcc2 <usb_process_request+0x474>
         return;
      }
      break;

      case SETUP_SET_CONFIGURATION:
      if (USB_SETUP_SET_STAND_DEVICE == bmRequestType)
 a4e:	11 11       	cpse	r17, r1
 a50:	1a c1       	rjmp	.+564    	; 0xc86 <usb_process_request+0x438>
Bool usb_set_configuration( void )
{
   U8 configuration_number;

   // Get/Check new configuration
   configuration_number = Usb_read_byte();
 a52:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
   if (configuration_number > NB_CONFIGURATION)
 a56:	82 30       	cpi	r24, 0x02	; 2
 a58:	08 f0       	brcs	.+2      	; 0xa5c <usb_process_request+0x20e>
 a5a:	15 c1       	rjmp	.+554    	; 0xc86 <usb_process_request+0x438>
      return FALSE;  //  Bad configuration number then stall request
   Usb_ack_receive_setup();
 a5c:	e8 ee       	ldi	r30, 0xE8	; 232
 a5e:	f0 e0       	ldi	r31, 0x00	; 0
 a60:	90 81       	ld	r25, Z
 a62:	97 7f       	andi	r25, 0xF7	; 247
 a64:	90 83       	st	Z, r25
   usb_configuration_nb = configuration_number;
 a66:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <usb_configuration_nb>
   
   Usb_send_control_in();                          // send a ZLP for STATUS phase
 a6a:	80 81       	ld	r24, Z
 a6c:	8e 7f       	andi	r24, 0xFE	; 254
 a6e:	80 83       	st	Z, r24
   usb_user_endpoint_init(usb_configuration_nb);   // endpoint configuration
 a70:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <usb_configuration_nb>
 a74:	0e 94 ca 01 	call	0x394	; 0x394 <usb_user_endpoint_init>
 a78:	24 c1       	rjmp	.+584    	; 0xcc2 <usb_process_request+0x474>
{
   U8 wValue;
   U8 wIndex;
   U8 dummy;

   switch (bmRequestType)
 a7a:	11 23       	and	r17, r17
 a7c:	19 f0       	breq	.+6      	; 0xa84 <usb_process_request+0x236>
 a7e:	12 30       	cpi	r17, 0x02	; 2
 a80:	21 f0       	breq	.+8      	; 0xa8a <usb_process_request+0x23c>
 a82:	01 c1       	rjmp	.+514    	; 0xc86 <usb_process_request+0x438>
   {
      case  USB_SETUP_SET_STAND_DEVICE:
      wValue = Usb_read_byte();
 a84:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
 a88:	fe c0       	rjmp	.+508    	; 0xc86 <usb_process_request+0x438>
      case USB_SETUP_SET_STAND_INTERFACE:
      return FALSE;                    // Unknow request
      break;
      
      case USB_SETUP_SET_STAND_ENDPOINT:
      wValue = Usb_read_byte();
 a8a:	e1 ef       	ldi	r30, 0xF1	; 241
 a8c:	f0 e0       	ldi	r31, 0x00	; 0
 a8e:	80 81       	ld	r24, Z
      dummy  = Usb_read_byte();
 a90:	90 81       	ld	r25, Z
      if (wValue != FEATURE_ENDPOINT_HALT)
 a92:	81 11       	cpse	r24, r1
 a94:	f8 c0       	rjmp	.+496    	; 0xc86 <usb_process_request+0x438>
         return FALSE;                 // Unknow request
      wIndex = (Usb_read_byte() & MSK_EP_DIR);
 a96:	e0 91 f1 00 	lds	r30, 0x00F1	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
 a9a:	ef 77       	andi	r30, 0x7F	; 127
      Usb_select_endpoint(wIndex);
 a9c:	e0 93 e9 00 	sts	0x00E9, r30	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
      if( !Is_usb_endpoint_enabled())
 aa0:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
 aa4:	80 fd       	sbrc	r24, 0
 aa6:	03 c0       	rjmp	.+6      	; 0xaae <usb_process_request+0x260>
      {
         Usb_select_endpoint(EP_CONTROL);
 aa8:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
 aac:	ec c0       	rjmp	.+472    	; 0xc86 <usb_process_request+0x438>
         return FALSE;              // Invalid request
      } 
      if(wIndex != EP_CONTROL)
 aae:	ee 23       	and	r30, r30
 ab0:	b9 f0       	breq	.+46     	; 0xae0 <usb_process_request+0x292>
      {
         Usb_disable_stall_handshake();
 ab2:	4b ee       	ldi	r20, 0xEB	; 235
 ab4:	50 e0       	ldi	r21, 0x00	; 0
 ab6:	da 01       	movw	r26, r20
 ab8:	8c 91       	ld	r24, X
 aba:	80 61       	ori	r24, 0x10	; 16
 abc:	8c 93       	st	X, r24
         Usb_reset_endpoint(wIndex);
 abe:	81 e0       	ldi	r24, 0x01	; 1
 ac0:	90 e0       	ldi	r25, 0x00	; 0
 ac2:	0e 2e       	mov	r0, r30
 ac4:	02 c0       	rjmp	.+4      	; 0xaca <usb_process_request+0x27c>
 ac6:	88 0f       	add	r24, r24
 ac8:	99 1f       	adc	r25, r25
 aca:	0a 94       	dec	r0
 acc:	e2 f7       	brpl	.-8      	; 0xac6 <usb_process_request+0x278>
 ace:	2a ee       	ldi	r18, 0xEA	; 234
 ad0:	30 e0       	ldi	r19, 0x00	; 0
 ad2:	d9 01       	movw	r26, r18
 ad4:	8c 93       	st	X, r24
 ad6:	1c 92       	st	X, r1
         Usb_reset_data_toggle();
 ad8:	da 01       	movw	r26, r20
 ada:	8c 91       	ld	r24, X
 adc:	88 60       	ori	r24, 0x08	; 8
 ade:	8c 93       	st	X, r24
      }
      Usb_select_endpoint(EP_CONTROL);
 ae0:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
      endpoint_status[wIndex] = 0x00;
 ae4:	f0 e0       	ldi	r31, 0x00	; 0
 ae6:	e9 5f       	subi	r30, 0xF9	; 249
 ae8:	fe 4f       	sbci	r31, 0xFE	; 254
 aea:	10 82       	st	Z, r1
      Usb_ack_receive_setup();
 aec:	e8 ee       	ldi	r30, 0xE8	; 232
 aee:	f0 e0       	ldi	r31, 0x00	; 0
 af0:	80 81       	ld	r24, Z
 af2:	87 7f       	andi	r24, 0xF7	; 247
 af4:	80 83       	st	Z, r24
      Usb_send_control_in();
 af6:	80 81       	ld	r24, Z
 af8:	8e 7f       	andi	r24, 0xFE	; 254
 afa:	80 83       	st	Z, r24
 afc:	e2 c0       	rjmp	.+452    	; 0xcc2 <usb_process_request+0x474>
{
   U8 wValue;
   U8 wIndex;
   U8 dummy;

   switch (bmRequestType)
 afe:	11 23       	and	r17, r17
 b00:	19 f0       	breq	.+6      	; 0xb08 <usb_process_request+0x2ba>
 b02:	12 30       	cpi	r17, 0x02	; 2
 b04:	21 f0       	breq	.+8      	; 0xb0e <usb_process_request+0x2c0>
 b06:	bf c0       	rjmp	.+382    	; 0xc86 <usb_process_request+0x438>
   {
      case USB_SETUP_SET_STAND_DEVICE:
      wValue = Usb_read_byte();
 b08:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
 b0c:	bc c0       	rjmp	.+376    	; 0xc86 <usb_process_request+0x438>
      case USB_SETUP_SET_STAND_INTERFACE:
      return FALSE;                    // Unknow request
      break;

      case USB_SETUP_SET_STAND_ENDPOINT:
      wValue   = Usb_read_byte();
 b0e:	e1 ef       	ldi	r30, 0xF1	; 241
 b10:	f0 e0       	ldi	r31, 0x00	; 0
 b12:	80 81       	ld	r24, Z
      dummy    = Usb_read_byte();                //!< dummy read
 b14:	90 81       	ld	r25, Z
      if (wValue != FEATURE_ENDPOINT_HALT)
 b16:	81 11       	cpse	r24, r1
 b18:	b6 c0       	rjmp	.+364    	; 0xc86 <usb_process_request+0x438>
         return FALSE;                 // Unknow request
      wIndex = (Usb_read_byte() & MSK_EP_DIR);
 b1a:	e0 91 f1 00 	lds	r30, 0x00F1	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
 b1e:	ef 77       	andi	r30, 0x7F	; 127
      if (wIndex == EP_CONTROL)
 b20:	51 f4       	brne	.+20     	; 0xb36 <usb_process_request+0x2e8>
      {
         Usb_enable_stall_handshake();
 b22:	ab ee       	ldi	r26, 0xEB	; 235
 b24:	b0 e0       	ldi	r27, 0x00	; 0
 b26:	8c 91       	ld	r24, X
 b28:	80 62       	ori	r24, 0x20	; 32
 b2a:	8c 93       	st	X, r24
         Usb_ack_receive_setup();
 b2c:	a8 ee       	ldi	r26, 0xE8	; 232
 b2e:	b0 e0       	ldi	r27, 0x00	; 0
 b30:	8c 91       	ld	r24, X
 b32:	87 7f       	andi	r24, 0xF7	; 247
 b34:	8c 93       	st	X, r24
      }
      Usb_select_endpoint(wIndex);
 b36:	e0 93 e9 00 	sts	0x00E9, r30	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
      if( !Is_usb_endpoint_enabled())
 b3a:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
 b3e:	80 fd       	sbrc	r24, 0
 b40:	03 c0       	rjmp	.+6      	; 0xb48 <usb_process_request+0x2fa>
      {
         Usb_select_endpoint(EP_CONTROL);
 b42:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
 b46:	9f c0       	rjmp	.+318    	; 0xc86 <usb_process_request+0x438>
         return FALSE;              // Invalid request
      }
      Usb_enable_stall_handshake();
 b48:	ab ee       	ldi	r26, 0xEB	; 235
 b4a:	b0 e0       	ldi	r27, 0x00	; 0
 b4c:	8c 91       	ld	r24, X
 b4e:	80 62       	ori	r24, 0x20	; 32
 b50:	8c 93       	st	X, r24
      Usb_select_endpoint(EP_CONTROL);
 b52:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
      endpoint_status[wIndex] = 0x01;
 b56:	f0 e0       	ldi	r31, 0x00	; 0
 b58:	e9 5f       	subi	r30, 0xF9	; 249
 b5a:	fe 4f       	sbci	r31, 0xFE	; 254
 b5c:	81 e0       	ldi	r24, 0x01	; 1
 b5e:	80 83       	st	Z, r24
      Usb_ack_receive_setup();
 b60:	e8 ee       	ldi	r30, 0xE8	; 232
 b62:	f0 e0       	ldi	r31, 0x00	; 0
 b64:	80 81       	ld	r24, Z
 b66:	87 7f       	andi	r24, 0xF7	; 247
 b68:	80 83       	st	Z, r24
      Usb_send_control_in();
 b6a:	80 81       	ld	r24, Z
 b6c:	8e 7f       	andi	r24, 0xFE	; 254
 b6e:	80 83       	st	Z, r24
 b70:	a8 c0       	rjmp	.+336    	; 0xcc2 <usb_process_request+0x474>
Bool usb_get_status( U8 bmRequestType )
{
   U8 wIndex;
   U8 dummy;

   dummy    = Usb_read_byte();                 //!< dummy read
 b72:	e1 ef       	ldi	r30, 0xF1	; 241
 b74:	f0 e0       	ldi	r31, 0x00	; 0
 b76:	80 81       	ld	r24, Z
   dummy    = Usb_read_byte();                 //!< dummy read
 b78:	80 81       	ld	r24, Z
   wIndex   = Usb_read_byte();
 b7a:	e0 81       	ld	r30, Z

   switch(bmRequestType)
 b7c:	11 38       	cpi	r17, 0x81	; 129
 b7e:	79 f0       	breq	.+30     	; 0xb9e <usb_process_request+0x350>
 b80:	12 38       	cpi	r17, 0x82	; 130
 b82:	a9 f0       	breq	.+42     	; 0xbae <usb_process_request+0x360>
 b84:	10 38       	cpi	r17, 0x80	; 128
 b86:	09 f0       	breq	.+2      	; 0xb8a <usb_process_request+0x33c>
 b88:	7e c0       	rjmp	.+252    	; 0xc86 <usb_process_request+0x438>
   {
      case USB_SETUP_GET_STAND_DEVICE:
      Usb_ack_receive_setup();
 b8a:	e8 ee       	ldi	r30, 0xE8	; 232
 b8c:	f0 e0       	ldi	r31, 0x00	; 0
 b8e:	80 81       	ld	r24, Z
 b90:	87 7f       	andi	r24, 0xF7	; 247
 b92:	80 83       	st	Z, r24
      Usb_write_byte(device_status);
 b94:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <device_status>
 b98:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
 b9c:	14 c0       	rjmp	.+40     	; 0xbc6 <usb_process_request+0x378>
      break;

      case USB_SETUP_GET_STAND_INTERFACE:
      Usb_ack_receive_setup();
 b9e:	e8 ee       	ldi	r30, 0xE8	; 232
 ba0:	f0 e0       	ldi	r31, 0x00	; 0
 ba2:	80 81       	ld	r24, Z
 ba4:	87 7f       	andi	r24, 0xF7	; 247
 ba6:	80 83       	st	Z, r24
      Usb_write_byte(0);      // Reserved - always 0
 ba8:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
 bac:	0c c0       	rjmp	.+24     	; 0xbc6 <usb_process_request+0x378>
      break;

      case USB_SETUP_GET_STAND_ENDPOINT:
      Usb_ack_receive_setup();
 bae:	a8 ee       	ldi	r26, 0xE8	; 232
 bb0:	b0 e0       	ldi	r27, 0x00	; 0
 bb2:	8c 91       	ld	r24, X
 bb4:	87 7f       	andi	r24, 0xF7	; 247
 bb6:	8c 93       	st	X, r24
      wIndex = wIndex & MSK_EP_DIR;
      Usb_write_byte( endpoint_status[wIndex] );
 bb8:	ef 77       	andi	r30, 0x7F	; 127
 bba:	f0 e0       	ldi	r31, 0x00	; 0
 bbc:	e9 5f       	subi	r30, 0xF9	; 249
 bbe:	fe 4f       	sbci	r31, 0xFE	; 254
 bc0:	80 81       	ld	r24, Z
 bc2:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
      break;
    
      default:
      return FALSE;
   }
   Usb_write_byte(0);
 bc6:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>

   Usb_send_control_in();
 bca:	e8 ee       	ldi	r30, 0xE8	; 232
 bcc:	f0 e0       	ldi	r31, 0x00	; 0
 bce:	80 81       	ld	r24, Z
 bd0:	8e 7f       	andi	r24, 0xFE	; 254
 bd2:	80 83       	st	Z, r24
   while( !Is_usb_receive_out() );
 bd4:	80 81       	ld	r24, Z
 bd6:	82 ff       	sbrs	r24, 2
 bd8:	fd cf       	rjmp	.-6      	; 0xbd4 <usb_process_request+0x386>
   Usb_ack_receive_out();
 bda:	e8 ee       	ldi	r30, 0xE8	; 232
 bdc:	f0 e0       	ldi	r31, 0x00	; 0
 bde:	80 81       	ld	r24, Z
 be0:	8b 7f       	andi	r24, 0xFB	; 251
 be2:	80 83       	st	Z, r24
 be4:	80 81       	ld	r24, Z
 be6:	8f 77       	andi	r24, 0x7F	; 127
 be8:	80 83       	st	Z, r24
 bea:	6b c0       	rjmp	.+214    	; 0xcc2 <usb_process_request+0x474>
      if (usb_get_status(bmRequestType))
         return;
      break;

      case SETUP_GET_INTERFACE:
      if (USB_SETUP_GET_STAND_INTERFACE == bmRequestType)
 bec:	11 38       	cpi	r17, 0x81	; 129
 bee:	09 f0       	breq	.+2      	; 0xbf2 <usb_process_request+0x3a4>
 bf0:	4a c0       	rjmp	.+148    	; 0xc86 <usb_process_request+0x438>
   U16   wInterface;
   U8    wValue_msb;
   U8    wValue_lsb;

   // Read wValue
   wValue_lsb = Usb_read_byte();
 bf2:	e1 ef       	ldi	r30, 0xF1	; 241
 bf4:	f0 e0       	ldi	r31, 0x00	; 0
 bf6:	80 81       	ld	r24, Z
   wValue_msb = Usb_read_byte();
 bf8:	80 81       	ld	r24, Z
   // wValue = Alternate Setting
   // wIndex = Interface
   LSB(wInterface)=Usb_read_byte();
 bfa:	90 81       	ld	r25, Z
 bfc:	99 83       	std	Y+1, r25	; 0x01
   MSB(wInterface)=Usb_read_byte();
 bfe:	90 81       	ld	r25, Z
 c00:	9a 83       	std	Y+2, r25	; 0x02
   if( (0!=wValue_msb) || (0!=wValue_msb) )
 c02:	81 11       	cpse	r24, r1
 c04:	40 c0       	rjmp	.+128    	; 0xc86 <usb_process_request+0x438>
      return FALSE;
   Usb_ack_receive_setup();
 c06:	08 ee       	ldi	r16, 0xE8	; 232
 c08:	10 e0       	ldi	r17, 0x00	; 0
 c0a:	f8 01       	movw	r30, r16
 c0c:	80 81       	ld	r24, Z
 c0e:	87 7f       	andi	r24, 0xF7	; 247
 c10:	80 83       	st	Z, r24
   
   Usb_write_byte( usb_user_interface_get(wInterface) );
 c12:	89 81       	ldd	r24, Y+1	; 0x01
 c14:	9a 81       	ldd	r25, Y+2	; 0x02
 c16:	0e 94 dd 01 	call	0x3ba	; 0x3ba <usb_user_interface_get>
 c1a:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
   Usb_send_control_in();
 c1e:	d8 01       	movw	r26, r16
 c20:	8c 91       	ld	r24, X
 c22:	8e 7f       	andi	r24, 0xFE	; 254
 c24:	8c 93       	st	X, r24

   while( !Is_usb_receive_out() );
 c26:	e8 ee       	ldi	r30, 0xE8	; 232
 c28:	f0 e0       	ldi	r31, 0x00	; 0
 c2a:	80 81       	ld	r24, Z
 c2c:	82 ff       	sbrs	r24, 2
 c2e:	fd cf       	rjmp	.-6      	; 0xc2a <usb_process_request+0x3dc>
   Usb_ack_receive_out();
 c30:	e8 ee       	ldi	r30, 0xE8	; 232
 c32:	f0 e0       	ldi	r31, 0x00	; 0
 c34:	80 81       	ld	r24, Z
 c36:	8b 7f       	andi	r24, 0xFB	; 251
 c38:	80 83       	st	Z, r24
 c3a:	80 81       	ld	r24, Z
 c3c:	8f 77       	andi	r24, 0x7F	; 127
 c3e:	80 83       	st	Z, r24
 c40:	40 c0       	rjmp	.+128    	; 0xcc2 <usb_process_request+0x474>
            return;
      }
      break;

      case SETUP_SET_INTERFACE:
      if (bmRequestType == USB_SETUP_SET_STAND_INTERFACE)
 c42:	11 30       	cpi	r17, 0x01	; 1
 c44:	01 f5       	brne	.+64     	; 0xc86 <usb_process_request+0x438>
   U16   wInterface;
   U8    wValue_msb;
   U8    wValue_lsb;

   // Read wValue
   wValue_lsb = Usb_read_byte();
 c46:	e1 ef       	ldi	r30, 0xF1	; 241
 c48:	f0 e0       	ldi	r31, 0x00	; 0
 c4a:	60 81       	ld	r22, Z
   wValue_msb = Usb_read_byte();
 c4c:	80 81       	ld	r24, Z
   // wValue = Alternate Setting
   // wIndex = Interface
   LSB(wInterface)=Usb_read_byte();
 c4e:	90 81       	ld	r25, Z
 c50:	99 83       	std	Y+1, r25	; 0x01
   MSB(wInterface)=Usb_read_byte();
 c52:	90 81       	ld	r25, Z
 c54:	9a 83       	std	Y+2, r25	; 0x02
   if( 0!=wValue_msb )
 c56:	81 11       	cpse	r24, r1
 c58:	16 c0       	rjmp	.+44     	; 0xc86 <usb_process_request+0x438>
      return FALSE;
   Usb_ack_receive_setup();
 c5a:	08 ee       	ldi	r16, 0xE8	; 232
 c5c:	10 e0       	ldi	r17, 0x00	; 0
 c5e:	f8 01       	movw	r30, r16
 c60:	80 81       	ld	r24, Z
 c62:	87 7f       	andi	r24, 0xF7	; 247
 c64:	80 83       	st	Z, r24
   
   usb_user_interface_reset(wInterface, wValue_lsb);
 c66:	89 81       	ldd	r24, Y+1	; 0x01
 c68:	9a 81       	ldd	r25, Y+2	; 0x02
 c6a:	0e 94 df 01 	call	0x3be	; 0x3be <usb_user_interface_reset>
   Usb_select_endpoint(EP_CONTROL);
 c6e:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
            
   Usb_send_control_in();
 c72:	d8 01       	movw	r26, r16
 c74:	8c 91       	ld	r24, X
 c76:	8e 7f       	andi	r24, 0xFE	; 254
 c78:	8c 93       	st	X, r24
   while(!Is_usb_in_ready());
 c7a:	e8 ee       	ldi	r30, 0xE8	; 232
 c7c:	f0 e0       	ldi	r31, 0x00	; 0
 c7e:	80 81       	ld	r24, Z
 c80:	80 ff       	sbrs	r24, 0
 c82:	fd cf       	rjmp	.-6      	; 0xc7e <usb_process_request+0x430>
 c84:	1e c0       	rjmp	.+60     	; 0xcc2 <usb_process_request+0x474>
      default:
      break;
   }

   // un-supported like standard request => call to user read request
   if( !usb_user_read_request(bmRequestType, bmRequest) )
 c86:	60 2f       	mov	r22, r16
 c88:	81 2f       	mov	r24, r17
 c8a:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <usb_user_read_request>
 c8e:	81 11       	cpse	r24, r1
 c90:	18 c0       	rjmp	.+48     	; 0xcc2 <usb_process_request+0x474>
   {
      // Request unknow in the specific request list from interface
      // keep that order (set StallRq/clear RxSetup) or a
      // OUT request following the SETUP may be acknowledged
      Usb_enable_stall_handshake();
 c92:	eb ee       	ldi	r30, 0xEB	; 235
 c94:	f0 e0       	ldi	r31, 0x00	; 0
 c96:	80 81       	ld	r24, Z
 c98:	80 62       	ori	r24, 0x20	; 32
 c9a:	80 83       	st	Z, r24
      Usb_ack_receive_setup();
 c9c:	e8 ee       	ldi	r30, 0xE8	; 232
 c9e:	f0 e0       	ldi	r31, 0x00	; 0
 ca0:	80 81       	ld	r24, Z
 ca2:	87 7f       	andi	r24, 0xF7	; 247
 ca4:	80 83       	st	Z, r24
      endpoint_status[(EP_CONTROL & MSK_EP_DIR)] = 0x01;
 ca6:	81 e0       	ldi	r24, 0x01	; 1
 ca8:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <endpoint_status>
 cac:	0a c0       	rjmp	.+20     	; 0xcc2 <usb_process_request+0x474>
         if (Is_usb_nak_out_sent())
            break;    // don't clear the flag now, it will be cleared after
      }
              
      nb_byte=0;
      while(data_to_transfer != 0)        //!< Send data until necessary
 cae:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <data_to_transfer>
 cb2:	81 11       	cpse	r24, r1
 cb4:	51 ce       	rjmp	.-862    	; 0x958 <usb_process_request+0x10a>
 cb6:	66 ce       	rjmp	.-820    	; 0x984 <usb_process_request+0x136>
    
   byte_to_send=0;
#if (USE_DEVICE_SN_UNIQUE==ENABLE)
   initial_data_to_transfer = data_to_transfer;
#endif
   while((data_to_transfer != 0) && (!Is_usb_nak_out_sent()))
 cb8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 cbc:	84 ff       	sbrs	r24, 4
 cbe:	40 ce       	rjmp	.-896    	; 0x940 <usb_process_request+0xf2>
 cc0:	7e ce       	rjmp	.-772    	; 0x9be <usb_process_request+0x170>
      // OUT request following the SETUP may be acknowledged
      Usb_enable_stall_handshake();
      Usb_ack_receive_setup();
      endpoint_status[(EP_CONTROL & MSK_EP_DIR)] = 0x01;
   }
}
 cc2:	0f 90       	pop	r0
 cc4:	0f 90       	pop	r0
 cc6:	df 91       	pop	r29
 cc8:	cf 91       	pop	r28
 cca:	1f 91       	pop	r17
 ccc:	0f 91       	pop	r16
 cce:	08 95       	ret

00000cd0 <usb_task_init>:
void usb_task_init(void)
{
   #if (USE_USB_PADS_REGULATOR==ENABLE)  // Otherwise assume USB PADs regulator is not used
   Usb_enable_regulator();
   #endif
   usb_device_task_init();
 cd0:	0e 94 52 01 	call	0x2a4	; 0x2a4 <usb_device_task_init>
 cd4:	08 95       	ret

00000cd6 <usb_task>:
 *
 *  @return none
*/
void usb_task(void)
{
   usb_device_task();
 cd6:	0e 94 7e 01 	call	0x2fc	; 0x2fc <usb_device_task>
 cda:	08 95       	ret

00000cdc <usb_delay_ms>:
}


void usb_delay_ms(U8 ms)
{
   for(;ms;ms--)
 cdc:	88 23       	and	r24, r24
 cde:	f1 f0       	breq	.+60     	; 0xd1c <usb_delay_ms+0x40>
   {
      for(delay_usb=0;delay_usb<FOSC/16;delay_usb++);
 ce0:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <delay_usb+0x1>
 ce4:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <delay_usb>
 ce8:	20 91 12 01 	lds	r18, 0x0112	; 0x800112 <delay_usb>
 cec:	30 91 13 01 	lds	r19, 0x0113	; 0x800113 <delay_usb+0x1>
 cf0:	24 3f       	cpi	r18, 0xF4	; 244
 cf2:	31 40       	sbci	r19, 0x01	; 1
 cf4:	88 f4       	brcc	.+34     	; 0xd18 <usb_delay_ms+0x3c>
 cf6:	20 91 12 01 	lds	r18, 0x0112	; 0x800112 <delay_usb>
 cfa:	30 91 13 01 	lds	r19, 0x0113	; 0x800113 <delay_usb+0x1>
 cfe:	2f 5f       	subi	r18, 0xFF	; 255
 d00:	3f 4f       	sbci	r19, 0xFF	; 255
 d02:	30 93 13 01 	sts	0x0113, r19	; 0x800113 <delay_usb+0x1>
 d06:	20 93 12 01 	sts	0x0112, r18	; 0x800112 <delay_usb>
 d0a:	20 91 12 01 	lds	r18, 0x0112	; 0x800112 <delay_usb>
 d0e:	30 91 13 01 	lds	r19, 0x0113	; 0x800113 <delay_usb+0x1>
 d12:	24 3f       	cpi	r18, 0xF4	; 244
 d14:	31 40       	sbci	r19, 0x01	; 1
 d16:	78 f3       	brcs	.-34     	; 0xcf6 <usb_delay_ms+0x1a>
}


void usb_delay_ms(U8 ms)
{
   for(;ms;ms--)
 d18:	81 50       	subi	r24, 0x01	; 1
 d1a:	11 f7       	brne	.-60     	; 0xce0 <usb_delay_ms+0x4>
 d1c:	08 95       	ret

00000d1e <__vector_11>:
 ISR(USB_GEN_vect)
#else
#pragma vector = USB_General_vect
__interrupt void usb_general_interrupt()
#endif
{
 d1e:	1f 92       	push	r1
 d20:	0f 92       	push	r0
 d22:	0f b6       	in	r0, 0x3f	; 63
 d24:	0f 92       	push	r0
 d26:	11 24       	eor	r1, r1
 d28:	2f 93       	push	r18
 d2a:	3f 93       	push	r19
 d2c:	4f 93       	push	r20
 d2e:	5f 93       	push	r21
 d30:	6f 93       	push	r22
 d32:	7f 93       	push	r23
 d34:	8f 93       	push	r24
 d36:	9f 93       	push	r25
 d38:	af 93       	push	r26
 d3a:	bf 93       	push	r27
 d3c:	ef 93       	push	r30
 d3e:	ff 93       	push	r31
  // - Device start of frame received
   if (Is_usb_sof() && Is_sof_interrupt_enabled())
 d40:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
 d44:	82 ff       	sbrs	r24, 2
 d46:	07 c0       	rjmp	.+14     	; 0xd56 <__vector_11+0x38>
 d48:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
 d4c:	82 ff       	sbrs	r24, 2
 d4e:	03 c0       	rjmp	.+6      	; 0xd56 <__vector_11+0x38>
   {
      Usb_ack_sof();
 d50:	8b ef       	ldi	r24, 0xFB	; 251
 d52:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
      Usb_sof_action();
   }
  // - Device Suspend event (no more USB activity detected)
   if (Is_usb_suspend() && Is_suspend_interrupt_enabled())
 d56:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
 d5a:	80 ff       	sbrs	r24, 0
 d5c:	27 c0       	rjmp	.+78     	; 0xdac <__vector_11+0x8e>
 d5e:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
 d62:	80 ff       	sbrs	r24, 0
 d64:	23 c0       	rjmp	.+70     	; 0xdac <__vector_11+0x8e>
   {
      usb_suspended=TRUE;
 d66:	81 e0       	ldi	r24, 0x01	; 1
 d68:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
      Usb_ack_wake_up();                 // clear wake up to detect next event
 d6c:	e1 ee       	ldi	r30, 0xE1	; 225
 d6e:	f0 e0       	ldi	r31, 0x00	; 0
 d70:	8f ee       	ldi	r24, 0xEF	; 239
 d72:	80 83       	st	Z, r24
      Usb_send_event(EVT_USB_SUSPEND);
 d74:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <g_usb_event>
 d78:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <g_usb_event+0x1>
 d7c:	80 62       	ori	r24, 0x20	; 32
 d7e:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <g_usb_event+0x1>
 d82:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <g_usb_event>
      Usb_ack_suspend();
 d86:	8e ef       	ldi	r24, 0xFE	; 254
 d88:	80 83       	st	Z, r24
      Usb_enable_wake_up_interrupt();
 d8a:	e2 ee       	ldi	r30, 0xE2	; 226
 d8c:	f0 e0       	ldi	r31, 0x00	; 0
 d8e:	80 81       	ld	r24, Z
 d90:	80 61       	ori	r24, 0x10	; 16
 d92:	80 83       	st	Z, r24
      Usb_disable_resume_interrupt();
 d94:	80 81       	ld	r24, Z
 d96:	8f 7d       	andi	r24, 0xDF	; 223
 d98:	80 83       	st	Z, r24
      Usb_freeze_clock();
 d9a:	e8 ed       	ldi	r30, 0xD8	; 216
 d9c:	f0 e0       	ldi	r31, 0x00	; 0
 d9e:	80 81       	ld	r24, Z
 da0:	80 62       	ori	r24, 0x20	; 32
 da2:	80 83       	st	Z, r24
      Stop_pll();
 da4:	89 b5       	in	r24, 0x29	; 41
 da6:	8d 7f       	andi	r24, 0xFD	; 253
 da8:	89 bd       	out	0x29, r24	; 41
 daa:	19 bc       	out	0x29, r1	; 41
      Usb_suspend_action();
   }
  // - Wake up event (USB activity detected): Used to resume
   if (Is_usb_wake_up() && Is_wake_up_interrupt_enabled())
 dac:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
 db0:	84 ff       	sbrs	r24, 4
 db2:	6a c0       	rjmp	.+212    	; 0xe88 <__vector_11+0x16a>
 db4:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
 db8:	84 ff       	sbrs	r24, 4
 dba:	66 c0       	rjmp	.+204    	; 0xe88 <__vector_11+0x16a>
   {
      if(Is_pll_ready()==FALSE)
 dbc:	09 b4       	in	r0, 0x29	; 41
 dbe:	00 fc       	sbrc	r0, 0
 dc0:	05 c0       	rjmp	.+10     	; 0xdcc <__vector_11+0xae>
      {
         #ifdef USE_USB_AUTOBAUD
            usb_autobaud();
         #else
            Pll_start_auto();
 dc2:	82 e0       	ldi	r24, 0x02	; 2
 dc4:	89 bd       	out	0x29, r24	; 41
         #endif
         Wait_pll_ready();
 dc6:	09 b4       	in	r0, 0x29	; 41
 dc8:	00 fe       	sbrs	r0, 0
 dca:	fd cf       	rjmp	.-6      	; 0xdc6 <__vector_11+0xa8>
      }
      Usb_unfreeze_clock();
 dcc:	e8 ed       	ldi	r30, 0xD8	; 216
 dce:	f0 e0       	ldi	r31, 0x00	; 0
 dd0:	80 81       	ld	r24, Z
 dd2:	8f 7d       	andi	r24, 0xDF	; 223
 dd4:	80 83       	st	Z, r24
      Usb_ack_wake_up();
 dd6:	8f ee       	ldi	r24, 0xEF	; 239
 dd8:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
      if(usb_suspended)
 ddc:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 de0:	88 23       	and	r24, r24
 de2:	09 f4       	brne	.+2      	; 0xde6 <__vector_11+0xc8>
 de4:	51 c0       	rjmp	.+162    	; 0xe88 <__vector_11+0x16a>
      {
         Usb_enable_resume_interrupt();
 de6:	e2 ee       	ldi	r30, 0xE2	; 226
 de8:	f0 e0       	ldi	r31, 0x00	; 0
 dea:	80 81       	ld	r24, Z
 dec:	80 62       	ori	r24, 0x20	; 32
 dee:	80 83       	st	Z, r24
         Usb_enable_reset_interrupt();
 df0:	80 81       	ld	r24, Z
 df2:	88 60       	ori	r24, 0x08	; 8
 df4:	80 83       	st	Z, r24
         while(Is_usb_wake_up())
 df6:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
 dfa:	84 ff       	sbrs	r24, 4
 dfc:	07 c0       	rjmp	.+14     	; 0xe0c <__vector_11+0xee>
         {
            Usb_ack_wake_up();
 dfe:	e1 ee       	ldi	r30, 0xE1	; 225
 e00:	f0 e0       	ldi	r31, 0x00	; 0
 e02:	9f ee       	ldi	r25, 0xEF	; 239
 e04:	90 83       	st	Z, r25
      Usb_ack_wake_up();
      if(usb_suspended)
      {
         Usb_enable_resume_interrupt();
         Usb_enable_reset_interrupt();
         while(Is_usb_wake_up())
 e06:	80 81       	ld	r24, Z
 e08:	84 fd       	sbrc	r24, 4
 e0a:	fc cf       	rjmp	.-8      	; 0xe04 <__vector_11+0xe6>
         {
            Usb_ack_wake_up();
         }
         usb_delay_ms(2);
 e0c:	82 e0       	ldi	r24, 0x02	; 2
 e0e:	0e 94 6e 06 	call	0xcdc	; 0xcdc <usb_delay_ms>
         if(Is_usb_sof() || Is_usb_resume() || Is_usb_reset() )
 e12:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
 e16:	82 fd       	sbrc	r24, 2
 e18:	08 c0       	rjmp	.+16     	; 0xe2a <__vector_11+0x10c>
 e1a:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
 e1e:	85 fd       	sbrc	r24, 5
 e20:	04 c0       	rjmp	.+8      	; 0xe2a <__vector_11+0x10c>
 e22:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
 e26:	83 ff       	sbrs	r24, 3
 e28:	18 c0       	rjmp	.+48     	; 0xe5a <__vector_11+0x13c>
         {
            Usb_disable_wake_up_interrupt();
 e2a:	e2 ee       	ldi	r30, 0xE2	; 226
 e2c:	f0 e0       	ldi	r31, 0x00	; 0
 e2e:	80 81       	ld	r24, Z
 e30:	8f 7e       	andi	r24, 0xEF	; 239
 e32:	80 83       	st	Z, r24
            Usb_wake_up_action();
            Usb_send_event(EVT_USB_WAKE_UP);
 e34:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <g_usb_event>
 e38:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <g_usb_event+0x1>
 e3c:	80 64       	ori	r24, 0x40	; 64
 e3e:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <g_usb_event+0x1>
 e42:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <g_usb_event>
            Usb_enable_suspend_interrupt();
 e46:	80 81       	ld	r24, Z
 e48:	81 60       	ori	r24, 0x01	; 1
 e4a:	80 83       	st	Z, r24
            Usb_enable_resume_interrupt();
 e4c:	80 81       	ld	r24, Z
 e4e:	80 62       	ori	r24, 0x20	; 32
 e50:	80 83       	st	Z, r24
            Usb_enable_reset_interrupt();
 e52:	80 81       	ld	r24, Z
 e54:	88 60       	ori	r24, 0x08	; 8
 e56:	80 83       	st	Z, r24
 e58:	17 c0       	rjmp	.+46     	; 0xe88 <__vector_11+0x16a>
            
         }
         else // Workarround to make the USB enter power down mode again (spurious transcient detected on the USB lines)
         {
            if(Is_usb_wake_up()) return;
 e5a:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
 e5e:	84 fd       	sbrc	r24, 4
 e60:	47 c0       	rjmp	.+142    	; 0xef0 <__vector_11+0x1d2>
            Usb_drive_dp_low();
 e62:	eb ef       	ldi	r30, 0xFB	; 251
 e64:	f0 e0       	ldi	r31, 0x00	; 0
 e66:	80 81       	ld	r24, Z
 e68:	8f 7d       	andi	r24, 0xDF	; 223
 e6a:	80 83       	st	Z, r24
            Usb_direct_drive_usb_enable();
 e6c:	80 81       	ld	r24, Z
 e6e:	80 68       	ori	r24, 0x80	; 128
 e70:	80 83       	st	Z, r24
 e72:	80 81       	ld	r24, Z
 e74:	8f 7b       	andi	r24, 0xBF	; 191
 e76:	80 83       	st	Z, r24
            Usb_direct_drive_disable();
 e78:	80 81       	ld	r24, Z
 e7a:	8f 73       	andi	r24, 0x3F	; 63
 e7c:	80 83       	st	Z, r24
            Usb_disable_wake_up_interrupt();
 e7e:	e2 ee       	ldi	r30, 0xE2	; 226
 e80:	f0 e0       	ldi	r31, 0x00	; 0
 e82:	80 81       	ld	r24, Z
 e84:	8f 7e       	andi	r24, 0xEF	; 239
 e86:	80 83       	st	Z, r24
         }
      }
   }
  // - Resume state bus detection
   if (Is_usb_resume() && Is_resume_interrupt_enabled())
 e88:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
 e8c:	85 ff       	sbrs	r24, 5
 e8e:	1a c0       	rjmp	.+52     	; 0xec4 <__vector_11+0x1a6>
 e90:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
 e94:	85 ff       	sbrs	r24, 5
 e96:	16 c0       	rjmp	.+44     	; 0xec4 <__vector_11+0x1a6>
   {
      usb_suspended = FALSE;
 e98:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
      Usb_disable_wake_up_interrupt();
 e9c:	e2 ee       	ldi	r30, 0xE2	; 226
 e9e:	f0 e0       	ldi	r31, 0x00	; 0
 ea0:	80 81       	ld	r24, Z
 ea2:	8f 7e       	andi	r24, 0xEF	; 239
 ea4:	80 83       	st	Z, r24
      Usb_ack_resume();
 ea6:	8f ed       	ldi	r24, 0xDF	; 223
 ea8:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
      Usb_disable_resume_interrupt();
 eac:	80 81       	ld	r24, Z
 eae:	8f 7d       	andi	r24, 0xDF	; 223
 eb0:	80 83       	st	Z, r24
      Usb_resume_action();
      Usb_send_event(EVT_USB_RESUME);
 eb2:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <g_usb_event>
 eb6:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <g_usb_event+0x1>
 eba:	80 68       	ori	r24, 0x80	; 128
 ebc:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <g_usb_event+0x1>
 ec0:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <g_usb_event>
   }
  // - USB bus reset detection
   if (Is_usb_reset()&& Is_reset_interrupt_enabled())
 ec4:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
 ec8:	83 ff       	sbrs	r24, 3
 eca:	12 c0       	rjmp	.+36     	; 0xef0 <__vector_11+0x1d2>
 ecc:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
 ed0:	83 ff       	sbrs	r24, 3
 ed2:	0e c0       	rjmp	.+28     	; 0xef0 <__vector_11+0x1d2>
   {
      Usb_ack_reset();
 ed4:	87 ef       	ldi	r24, 0xF7	; 247
 ed6:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
      usb_init_device();
 eda:	0e 94 bb 01 	call	0x376	; 0x376 <usb_init_device>
      Usb_reset_action();
      Usb_send_event(EVT_USB_RESET);
 ede:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <g_usb_event>
 ee2:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <g_usb_event+0x1>
 ee6:	91 60       	ori	r25, 0x01	; 1
 ee8:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <g_usb_event+0x1>
 eec:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <g_usb_event>
   }

}
 ef0:	ff 91       	pop	r31
 ef2:	ef 91       	pop	r30
 ef4:	bf 91       	pop	r27
 ef6:	af 91       	pop	r26
 ef8:	9f 91       	pop	r25
 efa:	8f 91       	pop	r24
 efc:	7f 91       	pop	r23
 efe:	6f 91       	pop	r22
 f00:	5f 91       	pop	r21
 f02:	4f 91       	pop	r20
 f04:	3f 91       	pop	r19
 f06:	2f 91       	pop	r18
 f08:	0f 90       	pop	r0
 f0a:	0f be       	out	0x3f, r0	; 63
 f0c:	0f 90       	pop	r0
 f0e:	1f 90       	pop	r1
 f10:	18 95       	reti

00000f12 <wdtdrv_disable>:
   // Ignored if IAR compiler optimization option "Always do cross call optimization" is enabled
   #pragma optimize=none 
#endif
void wdtdrv_disable(void)
{
   U8 save_int=Get_interrupt_state();
 f12:	8f b7       	in	r24, 0x3f	; 63
   Disable_interrupt();
 f14:	f8 94       	cli
#ifdef  __GNUC__
   Ack_wdt_reset();
 f16:	97 ef       	ldi	r25, 0xF7	; 247
 f18:	94 bf       	out	0x34, r25	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
 f1a:	0f b6       	in	r0, 0x3f	; 63
 f1c:	f8 94       	cli
 f1e:	a8 95       	wdr
 f20:	90 91 60 00 	lds	r25, 0x0060	; 0x800060 <__EEPROM_REGION_LENGTH__+0x7f0060>
 f24:	98 61       	ori	r25, 0x18	; 24
 f26:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__EEPROM_REGION_LENGTH__+0x7f0060>
 f2a:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__EEPROM_REGION_LENGTH__+0x7f0060>
 f2e:	0f be       	out	0x3f, r0	; 63
   Ack_wdt_reset();
   Wdt_reset_instruction();
   WDTCSR = (1<<WDCE) | (1<<WDE);
   WDTCSR = 0x00;
#endif
   if(save_int) { Enable_interrupt(); }
 f30:	88 23       	and	r24, r24
 f32:	0c f4       	brge	.+2      	; 0xf36 <wdtdrv_disable+0x24>
 f34:	78 94       	sei
 f36:	08 95       	ret

00000f38 <__tablejump2__>:
 f38:	ee 0f       	add	r30, r30
 f3a:	ff 1f       	adc	r31, r31
 f3c:	05 90       	lpm	r0, Z+
 f3e:	f4 91       	lpm	r31, Z
 f40:	e0 2d       	mov	r30, r0
 f42:	09 94       	ijmp

00000f44 <_exit>:
 f44:	f8 94       	cli

00000f46 <__stop_program>:
 f46:	ff cf       	rjmp	.-2      	; 0xf46 <__stop_program>
